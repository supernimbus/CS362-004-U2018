        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:#include <time.h>
        -:    9:#include <string.h>
        -:   10:
        -:   11:
        -:   12:
        -:   13:int cardEffectsFail = 0; 
        -:   14:int shuffle_fail = 0 ; 
        -:   15:int drawCardFail = 0 ; 
        -:   16:int deckHandCountFail = 0; 
        -:   17:int treasureFail = 0; 
        -:   18:
        -:   19:
        -:   20:
        -:   21://
        -:   22:
function adventurererTesting called 20000 returned 100% blocks executed 75%
        -:   23:void adventurererTesting(int p, struct gameState *after ){
        -:   24:
        -:   25:	
    20000:   26:	int postTreasure = 0; 
        -:   27:	
    20000:   28:	int preTresure = 0; 
        -:   29:	
        -:   30:
        -:   31:	int tempHand[MAX_HAND];
        -:   32:
    20000:   33:	int drawntreasure = 0 ; 
        -:   34:
        -:   35:	// initilize variables for gamestate
        -:   36:	struct gameState before; 
        -:   37:	int cardDraw; 
        -:   38:	int card; 
    20000:   39:	int bonus = 0 ; 
        -:   40:
        -:   41:	int a ; 
        -:   42:	int b ; 
        -:   43:	int c ; 
        -:   44:	int d; 
        -:   45:
    20000:   46:	int z = 0; 
        -:   47:
    20000:   48:	memcpy(&before, after, sizeof(struct gameState)); 
        -:   49:
        -:   50:	// call the cardeffect 
    20000:   51:	a = cardEffect(adventurer,0,0,0,after,0,&bonus);
        -:   52:
    20000:   53:	if(a){
branch  0 taken 0%
branch  1 taken 100%
    #####:   54:			cardEffectsFail++;
    #####:   55:	}
        -:   56:
  5091112:   57:	while(drawntreasure < 2){
branch  0 taken 99%
branch  1 taken 1%
        -:   58:
  2525556:   59:		if(before.deckCount[p] < 1){
branch  0 taken 0%
branch  1 taken 100%
        -:   60:
    #####:   61:			b = shuffle(p,&before);
        -:   62:
    #####:   63:			if(b == -1 && before.deckCount[p] >=1){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   64:				shuffle_fail++;
        -:   65:
    #####:   66:			}
    #####:   67:		}
        -:   68:
  2525556:   69:		c = drawCard(p,&before);
        -:   70:	
        -:   71:
        -:   72:	
        -:   73:
        -:   74:
        -:   75:
        -:   76:
  2525556:   77:	if( c == -1 && before.deckCount[p] != 0){
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:   78:
    #####:   79:		drawCardFail++;
        -:   80:
        -:   81:
    #####:   82:	}
        -:   83:
  2525556:   84:	cardDraw = before.hand[p][before.handCount[p] - 1];
  7536781:   85:	if (cardDraw == copper || cardDraw == silver || cardDraw == gold)
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
    40000:   86:				drawntreasure++;
        -:   87:
        -:   88:		else{
        -:   89:			
  2485556:   90:			tempHand[z] = cardDraw;
        -:   91:			
  2485556:   92:			before.handCount[p] --; 
        -:   93:			
  2485556:   94:			z++; 
        -:   95:		}
        -:   96:
        -:   97:	
        -:   98:}
        -:   99:
        -:  100:
        -:  101:
        -:  102:
        -:  103:
  5011112:  104:   while(z - 1 >= 0) {
branch  0 taken 99%
branch  1 taken 1%
  2485556:  105:            before.discard[p][before.discardCount[p]++] = tempHand[z - 1]; // discard all cards in play that have been drawn
  2485556:  106:            z = z - 1;
        -:  107:    }
        -:  108:
        -:  109:   
 10181748:  110: 	for (d = 0; d < after->handCount[p]; d++){
branch  0 taken 99%
branch  1 taken 1%
  5070874:  111: 		card = before.hand[p][d]; 
        -:  112:
 15172735:  113: 		if ( card == copper || card == silver || card == gold){
branch  0 taken 99%
branch  1 taken 1%
branch  2 taken 99%
branch  3 taken 1%
branch  4 taken 1%
branch  5 taken 99%
    40000:  114: 			preTresure ++ ; 
    40000:  115: 		}
  5070874:  116: 	}
        -:  117:
        -:  118:
    20000:  119: 			if ( postTreasure != preTresure){
branch  0 taken 100%
branch  1 taken 0%
    20000:  120: 				treasureFail++; 
    20000:  121: 			}
        -:  122:
        -:  123:
        -:  124:
        -:  125:
    20000:  126:  int afterHC = after->handCount[p];
        -:  127:  
    20000:  128:  int afterDC = after->deckCount[p]; 
    20000:  129:  int afterDCC = after->discardCount[p];
        -:  130:  
    20000:  131:  int beforeHC = before.handCount[p];
        -:  132:  
    20000:  133:  int beforeDC =  before.deckCount[p];
        -:  134:
    20000:  135:  int beforeDCC = before.discardCount[p];
        -:  136:
    20000:  137:   if( !( afterHC == beforeHC && afterDC == beforeDC && afterDCC == beforeDCC)){
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  138:
    20000:  139:   	deckHandCountFail++;
        -:  140:
    20000:  141:   } 
    20000:  142:}
        -:  143:
        -:  144:
        -:  145:
        -:  146:
        -:  147:
function main called 2 returned 100% blocks executed 90%
        -:  148:	 int main() { 
        -:  149:
        -:  150:
        2:  151:printf(" THE RANDOM TEST OF Function: adventurer, adventurererTesting()\n");
        -:  152:
        2:  153:int times = 10000; 
        -:  154:
        2:  155:int treasure[] = {copper,silver,gold}; 
        -:  156:
        -:  157:int numTreasures;
        -:  158:
        -:  159:int player; 
        -:  160:
        -:  161:struct gameState state; 
        -:  162:
        2:  163:int minimum = 3; 
        -:  164:
        2:  165:srand(time(NULL));
        -:  166:
        -:  167:
        -:  168://generate  game
        -:  169:
    40004:  170:for (int e = 0; e < times; e++){
branch  0 taken 99%
branch  1 taken 1%
1052040000:  171:	for (int i = 0; i < sizeof(struct gameState); i++){
branch  0 taken 99%
branch  1 taken 1%
        -:  172:
526000000:  173:		((char*)&state)[i] = floor(Random() * 256);
        -:  174:
526000000:  175:	}
        -:  176:
        -:  177:
        -:  178:
        -:  179:
        -:  180:
        -:  181:		//random testing values
    20000:  182:	player = floor(Random() * MAX_PLAYERS);
        -:  183:	
        -:  184:
        -:  185:
        -:  186:
    20000:  187:	state.deckCount[player] = floor(Random() * ((MAX_DECK - minimum) + 1) + minimum);
        -:  188:	
        -:  189:	
        -:  190:
        -:  191:
        -:  192:
        -:  193:
        -:  194:
    20000:  195:	numTreasures = floor(Random() * ((state.deckCount[player] - minimum) + 1) +  minimum); 
        -:  196:
        -:  197:
        -:  198:	
        -:  199:
        -:  200:
  5084640:  201:		for(int i = 0; i<numTreasures; i++){
branch  0 taken 99%
branch  1 taken 1%
        -:  202:
  2522320:  203:			state.deck[player][i] = treasure[rand() % 3];
        -:  204:
        -:  205:
        -:  206:
        -:  207:
        -:  208:
  2522320:  209:		}
        -:  210:
    20000:  211:		state.discardCount[player] = 0; 
        -:  212:		
    20000:  213:		state.handCount[player] = floor (Random() * (( MAX_HAND - minimum) + 1) + minimum);
        -:  214:		
    20000:  215:		state.whoseTurn = player;
        -:  216:
        -:  217:
        -:  218:
    20000:  219:			adventurererTesting(player, & state); 
        -:  220:
        -:  221:
        -:  222:
        -:  223:
        -:  224:
        -:  225:
        -:  226:
        -:  227:
        -:  228:
        -:  229:
        -:  230:
        -:  231:
        -:  232:
    20000:  233:	 }
        -:  234:
        -:  235:
        4:  236:	  int Fail_of_cards = cardEffectsFail + drawCardFail 
        -:  237:
        2:  238:	+ shuffle_fail + deckHandCountFail + treasureFail; 
        -:  239:
        -:  240:
        -:  241:
        -:  242:
        -:  243:
        2:  244:		if(times - Fail_of_cards <= 0) {
branch  0 taken 100%
branch  1 taken 0%
        -:  245:
        2:  246:			printf("\nTHE TEST RESULTS OF THE ADVENTURER CARD\n");
        2:  247:			printf("PASSES TEST:  %d\n",0);
        2:  248:			printf("FAILED TEST:  %d\n", times);
        2:  249:		}
        -:  250:
        -:  251:
        -:  252:
        -:  253:
        -:  254:
        -:  255:
        -:  256:
        -:  257:
        -:  258:		else {
        -:  259:
    #####:  260:			printf("\nTHE RESULTS OF THE ADVENTURER CARD\n");
    #####:  261:			printf("PASSES TEST:   %d\n", times - Fail_of_cards);
    #####:  262:			printf("FAILED TEST: %d\n", Fail_of_cards);
        -:  263:		}
        -:  264:
        -:  265:
        -:  266:
        -:  267:
        2:  268:		if (Fail_of_cards == 0){
branch  0 taken 0%
branch  1 taken 100%
    #####:  269:			printf("THE RANDOM TEST HAS PASSED \n\n");
    #####:  270:		}
        -:  271:
        -:  272:
        -:  273:
        -:  274:
        -:  275:
        -:  276:
        -:  277:
        -:  278:		else{
        2:  279:			printf("\n$$$$$$ FAILURE  DETAILS $$$$$$\n");
        2:  280:			printf(" shuffle () FAIL: %d\n",shuffle_fail);
        -:  281:
        -:  282:
        2:  283:			printf("drawCard() FAIL %d\n",drawCardFail);
        -:  284:
        -:  285:
        -:  286:
        -:  287:
        -:  288:
        2:  289:			printf("cardEffect FAIL %d\n", cardEffectsFail);
        -:  290:
        2:  291:			printf("Treasure   FAIL %d\n", treasureFail);
        -:  292:
        2:  293:			printf("Hand and deck fail %d\n ", deckHandCountFail);
        -:  294:
        2:  295:			printf("THE RANDOM TEST HAS FAILED \n\n\n") ;
        -:  296:		}
        -:  297:
        -:  298:	
        -:  299:
        -:  300:
        -:  301:
        -:  302:
        2:  303:return 0 ; 
        -:  304:
        -:  305:}
        -:  306:
        -:  307:
        -:  308:
        -:  309:
        -:  310:
        -:  311:
        -:  312:
        -:  313:
        -:  314:
        -:  315:
        -:  316:
        -:  317:
        -:  318:
        -:  319:
        -:  320:
        -:  321:
