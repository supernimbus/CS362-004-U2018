        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
        -:   10:int compare(const void* a, const void* b) {
  1412362:   11:  if (*(int*)a > *(int*)b)
   742247:   12:    return 1;
   670115:   13:  if (*(int*)a < *(int*)b)
   670115:   14:    return -1;
    #####:   15:  return 0;
  1412362:   16:}
        -:   17:
        -:   18:
        -:   19:
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
        -:   25:
        -:   26:
        -:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:      int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
        -:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:       struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;     
        -:   49:  //set up random number generator
    #####:   50:  SelectStream(1);
    #####:   51:  PutSeed((long)randomSeed);
        -:   52:  
        -:   53:  //check number of players
    #####:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
    #####:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
    #####:   63:  for (i = 0; i < 10; i++)
        -:   64:    {
    #####:   65:      for (j = 0; j < 10; j++)
        -:   66:        {
    #####:   67:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   68:      {
    #####:   69:        return -1;
        -:   70:      }
    #####:   71:        }
    #####:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
    #####:   79:  if (numPlayers == 2)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 10;
    #####:   82:    }
    #####:   83:  else if (numPlayers == 3)
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
    #####:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
    #####:   93:  if (numPlayers == 2)
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 8;
    #####:   96:      state->supplyCount[duchy] = 8;
    #####:   97:      state->supplyCount[province] = 8;
    #####:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
    #####:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  108:  state->supplyCount[silver] = 40;
    #####:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
    #####:  112:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  113:    {
    #####:  114:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  115:  {
    #####:  116:    if (kingdomCards[j] == i)
        -:  117:      {
        -:  118:        //check if card is a 'Victory' Kingdom card
    #####:  119:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  120:    {
    #####:  121:      if (numPlayers == 2){ 
    #####:  122:        state->supplyCount[i] = 8; 
    #####:  123:      }
    #####:  124:      else{ state->supplyCount[i] = 12; }
    #####:  125:    }
        -:  126:        else
        -:  127:    {
    #####:  128:      state->supplyCount[i] = 10;
        -:  129:    }
    #####:  130:        break;
        -:  131:      }
        -:  132:    else    //card is not in the set choosen for the game
        -:  133:      {
    #####:  134:        state->supplyCount[i] = -1;
        -:  135:      }
    #####:  136:  }
        -:  137:
    #####:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
    #####:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:    {
    #####:  146:      state->deckCount[i] = 0;
    #####:  147:      for (j = 0; j < 3; j++)
        -:  148:  {
    #####:  149:    state->deck[i][j] = estate;
    #####:  150:    state->deckCount[i]++;
    #####:  151:  }
    #####:  152:      for (j = 3; j < 10; j++)
        -:  153:  {
    #####:  154:    state->deck[i][j] = copper;
    #####:  155:    state->deckCount[i]++;    
    #####:  156:  }
    #####:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
    #####:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:    {
    #####:  162:      if ( shuffle(i, state) < 0 )
        -:  163:  {
    #####:  164:    return -1;
        -:  165:  }
    #####:  166:    }
        -:  167:
        -:  168:  //draw player hands
    #####:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
    #####:  172:      state->handCount[i] = 0;
    #####:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //  {
        -:  177:      //    drawCard(i, state);
        -:  178:      //  }
    #####:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
    #####:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:    {
    #####:  184:      state->embargoTokens[i] = 0;
    #####:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
    #####:  188:  state->outpostPlayed = 0;
    #####:  189:  state->phase = 0;
    #####:  190:  state->numActions = 1;
    #####:  191:  state->numBuys = 1;
    #####:  192:  state->playedCardCount = 0;
    #####:  193:  state->whoseTurn = 0;
    #####:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  198:  for (it = 0; it < 5; it++){
    #####:  199:    drawCard(state->whoseTurn, state);
    #####:  200:  }
        -:  201:
    #####:  202:  updateCoins(state->whoseTurn, state, 0);
        -:  203:
    #####:  204:  return 0;
    #####:  205:}
        -:  206:
        -:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
      669:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
      669:  215:  if (state->deckCount[player] < 1)
        2:  216:    return -1;
      667:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
   348852:  220:  while (state->deckCount[player] > 0) {
   173759:  221:    card = floor(Random() * state->deckCount[player]);
   173759:  222:    newDeck[newDeckPos] = state->deck[player][card];
   173759:  223:    newDeckPos++;
 29218042:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
 14435262:  225:      state->deck[player][i] = state->deck[player][i+1];
 14435262:  226:    }
   173759:  227:    state->deckCount[player]--;
        -:  228:  }
   348852:  229:  for (i = 0; i < newDeckPos; i++) {
   173759:  230:    state->deck[player][i] = newDeck[i];
   173759:  231:    state->deckCount[player]++;
   173759:  232:  }
        -:  233:
      667:  234:  return 0;
      669:  235:}
        -:  236:
        -:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{ 
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:  
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:  
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
        -:  256:  
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:  
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:  
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  274:  
    #####:  275:  return 0;
    #####:  276:}
        -:  277:
        -:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
    #####:  315:}
        -:  316:
        -:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
        -:  319:}
        -:  320:
        -:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
    #####:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
        -:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
        -:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
    #####:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
    #####:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
    #####:  347:    }
        -:  348:
    #####:  349:  return count;
        -:  350:}
        -:  351:
        -:  352:int whoseTurn(struct gameState *state) {
    50000:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
        -:  356:
        -:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
        -:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:  
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
        -:  412:  {
    #####:  413:    j++;
    #####:  414:  }
    #####:  415:    }
    #####:  416:  if ( j >= 3)
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
    #####:  422:}
        -:  423:
        -:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  459:    }
        -:  460:
    #####:  461:  return score;
        -:  462:}
        -:  463:
        -:  464:
        -:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;  
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
        -:  476:  {
    #####:  477:    players[i] = -9999;
    #####:  478:  }
        -:  479:      else
        -:  480:  {
    #####:  481:    players[i] = scoreFor (i, state);
        -:  482:  }
    #####:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
        -:  490:  {
    #####:  491:    j = i;
    #####:  492:  }
    #####:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
        -:  501:  {
    #####:  502:    players[i]++;
    #####:  503:  }
    #####:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
        -:  511:  {
    #####:  512:    j = i;
    #####:  513:  }
    #####:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
        -:  521:  {
    #####:  522:    players[i] = 1;
    #####:  523:  }
        -:  524:      else
        -:  525:  {
    #####:  526:    players[i] = 0;
        -:  527:  }
    #####:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
        -:  533:
        -:  534:int drawCard(int player, struct gameState *state)
        -:  535:{ int count;
        -:  536:  int deckCounter;
  2935612:  537:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  538:    
        -:  539:    //Step 1 Shuffle the discard pile back into a deck
        -:  540:    int i;
        -:  541:    //Move discard to deck
   348856:  542:    for (i = 0; i < state->discardCount[player];i++){
   173759:  543:      state->deck[player][i] = state->discard[player][i];
   173759:  544:      state->discard[player][i] = -1;
   173759:  545:    }
        -:  546:
      669:  547:    state->deckCount[player] = state->discardCount[player];
      669:  548:    state->discardCount[player] = 0;//Reset discard
        -:  549:
        -:  550:    //Shufffle the deck
      669:  551:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  552:   
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  555:    }
        -:  556:    
      669:  557:    state->discardCount[player] = 0;
        -:  558:
        -:  559:    //Step 2 Draw Card
      669:  560:    count = state->handCount[player];//Get current player's hand count
        -:  561:    
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Current hand count: %d\n", count);
        -:  564:    }
        -:  565:    
      669:  566:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  567:
      669:  568:    if (deckCounter == 0)
        2:  569:      return -1;
        -:  570:
      667:  571:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      667:  572:    state->deckCount[player]--;
      667:  573:    state->handCount[player]++;//Increment hand count
      667:  574:  }
        -:  575:
        -:  576:  else{
  2934943:  577:    int count = state->handCount[player];//Get current hand count for player
        -:  578:    int deckCounter;
        -:  579:    if (DEBUG){//Debug statements
        -:  580:      printf("Current hand count: %d\n", count);
        -:  581:    }
        -:  582:
  2934943:  583:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2934943:  584:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2934943:  585:    state->deckCount[player]--;
  2934943:  586:    state->handCount[player]++;//Increment hand count
        -:  587:  }
        -:  588:
  2935610:  589:  return 0;
  2935612:  590:}
        -:  591:
        -:  592:
        -:  593:
        -:  594:
        -:  595:
        -:  596:
        -:  597:
        -:  598:int getCost(int cardNumber)
        -:  599:{
    #####:  600:  switch( cardNumber ) 
        -:  601:    {
        -:  602:    case curse:
    #####:  603:      return 0;
        -:  604:    case estate:
    #####:  605:      return 2;
        -:  606:    case duchy:
    #####:  607:      return 5;
        -:  608:    case province:
    #####:  609:      return 8;
        -:  610:    case copper:
    #####:  611:      return 0;
        -:  612:    case silver:
    #####:  613:      return 3;
        -:  614:    case gold:
    #####:  615:      return 6;
        -:  616:
        -:  617:
        -:  618:
        -:  619:
        -:  620:
        -:  621:    case adventurer:
    #####:  622:      return 6;
        -:  623:    
        -:  624:
        -:  625:
        -:  626:
        -:  627:    case council_room:
    #####:  628:      return 5;
        -:  629:    case feast:
    #####:  630:      return 4;
        -:  631:   
        -:  632:    case gardens:
    #####:  633:      return 4;
        -:  634:    case mine:
    #####:  635:      return 5;
        -:  636:    case remodel:
    #####:  637:      return 4;
        -:  638:
        -:  639:
        -:  640:
        -:  641:    case smithy:
    #####:  642:      return 4;
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:
        -:  649:    case village:
    #####:  650:      return 3;
        -:  651:    case baron:
    #####:  652:      return 4;
        -:  653:    case great_hall:
    #####:  654:      return 3;
        -:  655:    case minion:
    #####:  656:      return 5;
        -:  657:    case steward:
    #####:  658:      return 3;
        -:  659:    case tribute:
    #####:  660:      return 5;
        -:  661:    case ambassador:
    #####:  662:      return 3;
        -:  663:    case cutpurse:
    #####:  664:      return 4;
        -:  665:    case embargo: 
    #####:  666:      return 2;
        -:  667:    case outpost:
    #####:  668:      return 5;
        -:  669:    case salvager:
    #####:  670:      return 4;
        -:  671:    case sea_hag:
    #####:  672:      return 4;
        -:  673:    case treasure_map:
    #####:  674:      return 4;
        -:  675:    }
        -:  676:  
    #####:  677:  return -1;
    #####:  678:}
        -:  679:
        -:  680:
        -:  681:
        -:  682:
        -:  683:
        -:  684:
        -:  685:// adventurerFunction created (REFACTORING)
        -:  686:// For the function Adventure, we should add a variable, and add a 
        -:  687:// parameter to the function. We should also add a structure, and a 
        -:  688:// pointer to a given variable
        -:  689:
        -:  690:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  691:
        -:  692:  int cardDrawn;
    10000:  693:  int drawntreasure = 0;
        -:  694:
        -:  695:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  696:  // placed
        -:  697:
        -:  698:    // bug
        -:  699:    
  2565556:  700: while(drawntreasure<3){
        -:  701:  
  1272778:  702:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  703:    shuffle(currentPlayer, state);
    #####:  704:  }
  1272778:  705:  drawCard(currentPlayer, state);
        -:  706:  
        -:  707:
        -:  708:
  1272778:  709:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  3788340:  710:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    30000:  711:    drawntreasure++;
        -:  712:  else{
  1242778:  713:    temphand[z]=cardDrawn;
  1242778:  714:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1242778:  715:    z++;
        -:  716:  }
        -:  717:  }
        -:  718:
        -:  719:
        -:  720:    // here we omit the return 0 as it is not required as given previoulsy in the case
  2505556:  721:      while(z-1 >=0){
  1242778:  722:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1242778:  723:      z=z-1;
        -:  724:      }
    10000:  725:    }
        -:  726:
        -:  727:
        -:  728:// FunctionSmithy created (Refactored)
        -:  729:
        -:  730:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  731:
        -:  732:   // for loop enforced in function
        -:  733:
        -:  734:    // bug detected
   200000:  735:  for ( int i = 0; i<4;i++)
        -:  736:  {
        -:  737:
    80000:  738:    drawCard(currentPlayer,state);
        -:  739:
    80000:  740:  }
        -:  741:
        -:  742:        //discard card from hand
    20000:  743:        discardCard(handPos, currentPlayer,state,0);
        -:  744:
        -:  745:        // Since void function we dont return 0
    20000:  746:}
        -:  747:
        -:  748:
        -:  749:
        -:  750:// function_council_room created (refactored)
        -:  751:
        -:  752:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  753:
        -:  754:    // bug detected
        -:  755:   
   240000:  756:   for( int i = 0; i<5 ; i++)
        -:  757:    {
        -:  758:
   100000:  759:      drawCard(currentPlayer,state);
   100000:  760:    }
        -:  761:
        -:  762:      //+1 Buy
    20000:  763:    state->numBuys++;
        -:  764:
        -:  765:
        -:  766:      //Each other player draws a card
   160056:  767:      for (int i = 0; i < state->numPlayers; i++)
        -:  768:  {
    60028:  769:    if ( i != currentPlayer )
        -:  770:      {
    40028:  771:        drawCard(i, state);
    40028:  772:      }
    60028:  773:  }
        -:  774:
        -:  775:  // put played card in placed card pile
    20000:  776:  discardCard(handPos,currentPlayer,state, 0);
        -:  777:
    20000:  778:}
        -:  779:
        -:  780:// functionSalvager created(refactored)
        -:  781:
        -:  782:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  783:{
        -:  784:  
        -:  785:
        -:  786:  //+1 buy
    #####:  787:      state->numBuys++;
        -:  788:      
    #####:  789:      if (choice1)
        -:  790:  {
        -:  791:    //gain coins equal to trashed card
    #####:  792:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  793:   
        -:  794:    //trash card
    #####:  795:    discardCard(choice1, currentPlayer, state, 1);  
    #####:  796:  }
        -:  797:      
        -:  798:      //discard card
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
        -:  800:    
    #####:  801:}
        -:  802:
        -:  803:
        -:  804:
        -:  805:
        -:  806:// outpostFunction (REFACTORED)
        -:  807:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  808:
        -:  809: //bug 
        -:  810:
        -:  811:  //set outpost flag
    #####:  812:      state->outpostPlayed++;
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
        -:  816:  
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:
        -:  823:
        -:  824:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  825:{
        -:  826:  int i;
        -:  827:  int j;
        -:  828:  int k;
        -:  829:  int x;
        -:  830:  int index;
    50000:  831:  int currentPlayer = whoseTurn(state);
    50000:  832:  int nextPlayer = currentPlayer + 1;
        -:  833:
    50000:  834:  int tributeRevealedCards[2] = {-1, -1};
        -:  835:  int temphand[MAX_HAND];// moved above the if statement
    50000:  836:  int drawntreasure=0;
        -:  837:  int cardDrawn;
    50000:  838:  int z = 0;// this is the counter for the temp hand
    50000:  839:  if (nextPlayer > (state->numPlayers - 1)){
    14881:  840:    nextPlayer = 0;
    14881:  841:  }
        -:  842:  
        -:  843:  
        -:  844:  //uses switch to select card and perform actions
        -:  845:  
        -:  846:
        -:  847:
        -:  848:
    50000:  849:  switch( card ) 
        -:  850:    {
        -:  851:    
        -:  852:
        -:  853:
        -:  854:/*********************************************************************/
        -:  855:
        -:  856:
        -:  857:
        -:  858:
        -:  859:    case adventurer:
        -:  860:    // CALL THE FUNCTION
    10000:  861:        adventurerFunction(currentPlayer,temphand,z,state);
    10000:  862:        return 0; 
        -:  863:
        -:  864:
        -:  865:/*********************************************************************/
        -:  866:
        -:  867:
        -:  868:
        -:  869:// call the council_room function
        -:  870:
        -:  871:    case council_room:
    20000:  872:          council_roomFunction(currentPlayer,handPos,state);
    20000:  873:          return 0; 
        -:  874:
        -:  875:
        -:  876:
        -:  877:      
        -:  878:   
        -:  879:
        -:  880:
        -:  881:
        -:  882:/*********************************************************************/
        -:  883:
        -:  884:    
        -:  885:      
        -:  886:
        -:  887:
        -:  888:
        -:  889:    case feast:
        -:  890:      //gain card with cost up to 5
        -:  891:      //Backup hand
    #####:  892:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  893:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  894:  state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  895:      }
        -:  896:      //Backup hand
        -:  897:
        -:  898:      //Update Coins for Buy
    #####:  899:      updateCoins(currentPlayer, state, 5);
    #####:  900:      x = 1;//Condition to loop on
    #####:  901:      while( x == 1) {//Buy one card
    #####:  902:  if (supplyCount(choice1, state) <= 0){
        -:  903:    if (DEBUG)
        -:  904:      printf("None of that card left, sorry!\n");
        -:  905:
        -:  906:    if (DEBUG){
        -:  907:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  908:    }
    #####:  909:  }
    #####:  910:  else if (state->coins < getCost(choice1)){
    #####:  911:    printf("That card is too expensive!\n");
        -:  912:
        -:  913:    if (DEBUG){
        -:  914:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  915:    }
    #####:  916:  }
        -:  917:  else{
        -:  918:
        -:  919:    if (DEBUG){
        -:  920:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:    }
        -:  922:
    #####:  923:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  924:    x = 0;//No more buying cards
        -:  925:
        -:  926:    if (DEBUG){
        -:  927:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  928:    }
        -:  929:
        -:  930:  }
        -:  931:      }     
        -:  932:
        -:  933:      //Reset Hand
    #####:  934:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  935:  state->hand[currentPlayer][i] = temphand[i];
    #####:  936:  temphand[i] = -1;
    #####:  937:      }
        -:  938:      //Reset Hand
        -:  939:            
    #####:  940:      return 0;
        -:  941:      
        -:  942:    
        -:  943:/*********************************************************************/
        -:  944:
        -:  945:
        -:  946:
        -:  947:    case gardens:
    #####:  948:      return -1;
        -:  949:      
        -:  950:   
        -:  951:/*********************************************************************/
        -:  952:
        -:  953:
        -:  954:
        -:  955:    case mine:
    #####:  956:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  957:
    #####:  958:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  959:  {
    #####:  960:    return -1;
        -:  961:  }
        -:  962:    
    #####:  963:      if (choice2 > treasure_map || choice2 < curse)
        -:  964:  {
    #####:  965:    return -1;
        -:  966:  }
        -:  967:
    #####:  968:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  969:  {
    #####:  970:    return -1;
        -:  971:  }
        -:  972:
    #####:  973:      gainCard(choice2, state, 2, currentPlayer);
        -:  974:
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
        -:  977:
        -:  978:      //discard trashed card
    #####:  979:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  980:  {
    #####:  981:    if (state->hand[currentPlayer][i] == j)
        -:  982:      {
    #####:  983:        discardCard(i, currentPlayer, state, 0);      
    #####:  984:        break;
        -:  985:      }
    #####:  986:  }
        -:  987:      
    #####:  988:      return 0;
        -:  989:      
        -:  990:    /*********************************************************************/
        -:  991:
        -:  992:
        -:  993:
        -:  994:
        -:  995:    case remodel:
    #####:  996:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  997:
    #####:  998:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  999:  {
    #####: 1000:    return -1;
        -: 1001:  }
        -: 1002:
    #####: 1003:      gainCard(choice2, state, 0, currentPlayer);
        -: 1004:
        -: 1005:      //discard card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);
        -: 1007:
        -: 1008:      //discard trashed card
    #####: 1009:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1010:  {
    #####: 1011:    if (state->hand[currentPlayer][i] == j)
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);      
    #####: 1014:        break;
        -: 1015:      }
    #####: 1016:  }
        -: 1017:
        -: 1018:
    #####: 1019:      return 0;
        -: 1020:    
        -: 1021:    
        -: 1022:
        -: 1023:
        -: 1024:
        -: 1025:
        -: 1026:
        -: 1027:/*********************************************************************/
        -: 1028:
        -: 1029:   
        -: 1030:    
        -: 1031:
        -: 1032:
        -: 1033:      case smithy:
    20000: 1034:        smithyFunction(currentPlayer,handPos,state);
    20000: 1035:        return 0 ; 
        -: 1036:
        -: 1037:
        -: 1038:/*********************************************************************/
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:    case village:
        -: 1044:      //+1 Card
    #####: 1045:      drawCard(currentPlayer, state);
        -: 1046:      
        -: 1047:      //+2 Actions
    #####: 1048:      state->numActions = state->numActions + 2;
        -: 1049:      
        -: 1050:      //discard played card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1052:      return 0;
        -: 1053:    
        -: 1054:
        -: 1055:
        -: 1056:/*********************************************************************/
        -: 1057:
        -: 1058:
        -: 1059:
        -: 1060:
        -: 1061:
        -: 1062:    case baron:
    #####: 1063:      state->numBuys++;//Increase buys by 1!
    #####: 1064:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1065:  int p = 0;//Iterator for hand!
    #####: 1066:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1067:  while(card_not_discarded){
    #####: 1068:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1069:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1070:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1071:      state->discardCount[currentPlayer]++;
    #####: 1072:      for (;p < state->handCount[currentPlayer]; p++){
    #####: 1073:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1074:      }
    #####: 1075:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1076:      state->handCount[currentPlayer]--;
    #####: 1077:      card_not_discarded = 0;//Exit the loop
    #####: 1078:    }
    #####: 1079:    else if (p > state->handCount[currentPlayer]){
        -: 1080:      if(DEBUG) {
        -: 1081:        printf("No estate cards in your hand, invalid choice\n");
        -: 1082:        printf("Must gain an estate if there are any\n");
        -: 1083:      }
    #####: 1084:      if (supplyCount(estate, state) > 0){
    #####: 1085:        gainCard(estate, state, 0, currentPlayer);
    #####: 1086:        state->supplyCount[estate]--;//Decrement estates
    #####: 1087:        if (supplyCount(estate, state) == 0){
    #####: 1088:    isGameOver(state);
    #####: 1089:        }
    #####: 1090:      }
    #####: 1091:      card_not_discarded = 0;//Exit the loop
    #####: 1092:    }
        -: 1093:          
        -: 1094:    else{
    #####: 1095:      p++;//Next card
        -: 1096:    }
        -: 1097:  }
    #####: 1098:      }
        -: 1099:          
        -: 1100:      else{
    #####: 1101:  if (supplyCount(estate, state) > 0){
    #####: 1102:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1103:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1104:    if (supplyCount(estate, state) == 0){
    #####: 1105:      isGameOver(state);
    #####: 1106:    }
    #####: 1107:  }
        -: 1108:      }
        -: 1109:      
        -: 1110:      
    #####: 1111:      return 0;
        -: 1112:    
        -: 1113:    
        -: 1114:
        -: 1115:/*********************************************************************/
        -: 1116:
        -: 1117:
        -: 1118:
        -: 1119:
        -: 1120:    case great_hall:
        -: 1121:      //+1 Card
    #####: 1122:      drawCard(currentPlayer, state);
        -: 1123:      
        -: 1124:      //+1 Actions
    #####: 1125:      state->numActions++;
        -: 1126:      
        -: 1127:      //discard card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1129:      return 0;
        -: 1130:    
        -: 1131:    
        -: 1132:
        -: 1133:
        -: 1134:/*********************************************************************/
        -: 1135:
        -: 1136:
        -: 1137:
        -: 1138:
        -: 1139:    case minion:
        -: 1140:      //+1 action
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
        -: 1145:      
    #####: 1146:      if (choice1)    //+2 coins
        -: 1147:  {
    #####: 1148:    state->coins = state->coins + 2;
    #####: 1149:  }
        -: 1150:      
    #####: 1151:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1152:  {
        -: 1153:    //discard hand
    #####: 1154:    while(numHandCards(state) > 0)
        -: 1155:      {
    #####: 1156:        discardCard(handPos, currentPlayer, state, 0);
        -: 1157:      }
        -: 1158:        
        -: 1159:    //draw 4
    #####: 1160:    for (i = 0; i < 4; i++)
        -: 1161:      {
    #####: 1162:        drawCard(currentPlayer, state);
    #####: 1163:      }
        -: 1164:        
        -: 1165:    //other players discard hand and redraw if hand size > 4
    #####: 1166:    for (i = 0; i < state->numPlayers; i++)
        -: 1167:      {
    #####: 1168:        if (i != currentPlayer)
        -: 1169:    {
    #####: 1170:      if ( state->handCount[i] > 4 )
        -: 1171:        {
        -: 1172:          //discard hand
    #####: 1173:          while( state->handCount[i] > 0 )
        -: 1174:      {
    #####: 1175:        discardCard(handPos, i, state, 0);
        -: 1176:      }
        -: 1177:              
        -: 1178:          //draw 4
    #####: 1179:          for (j = 0; j < 4; j++)
        -: 1180:      {
    #####: 1181:        drawCard(i, state);
    #####: 1182:      }
    #####: 1183:        }
    #####: 1184:    }
    #####: 1185:      }
        -: 1186:        
    #####: 1187:  }
    #####: 1188:      return 0;
        -: 1189:    
        -: 1190:   
        -: 1191:
        -: 1192:
        -: 1193:
        -: 1194:
        -: 1195:/*********************************************************************/
        -: 1196:
        -: 1197:
        -: 1198:
        -: 1199:
        -: 1200:    case steward:
    #####: 1201:      if (choice1 == 1)
        -: 1202:  {
        -: 1203:    //+2 cards
    #####: 1204:    drawCard(currentPlayer, state);
    #####: 1205:    drawCard(currentPlayer, state);
    #####: 1206:  }
    #####: 1207:      else if (choice1 == 2)
        -: 1208:  {
        -: 1209:    //+2 coins
    #####: 1210:    state->coins = state->coins + 2;
    #####: 1211:  }
        -: 1212:      else
        -: 1213:  {
        -: 1214:    //trash 2 cards in hand
    #####: 1215:    discardCard(choice2, currentPlayer, state, 1);
    #####: 1216:    discardCard(choice3, currentPlayer, state, 1);
        -: 1217:  }
        -: 1218:      
        -: 1219:      //discard card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1221:      return 0;
        -: 1222:    
        -: 1223:    
        -: 1224:
        -: 1225:
        -: 1226:
        -: 1227:/**********************************************************************/
        -: 1228:
        -: 1229:
        -: 1230:
        -: 1231:
        -: 1232:
        -: 1233:
        -: 1234:
        -: 1235:
        -: 1236:    case tribute:
    #####: 1237:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1238:  if (state->deckCount[nextPlayer] > 0){
    #####: 1239:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1240:    state->deckCount[nextPlayer]--;
    #####: 1241:  }
    #####: 1242:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1243:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1244:    state->discardCount[nextPlayer]--;
    #####: 1245:  }
        -: 1246:  else{
        -: 1247:    //No Card to Reveal
        -: 1248:    if (DEBUG){
        -: 1249:      printf("No cards to reveal\n");
        -: 1250:    }
        -: 1251:  }
    #####: 1252:      }
        -: 1253:      
        -: 1254:      else{
    #####: 1255:  if (state->deckCount[nextPlayer] == 0){
    #####: 1256:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1257:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1258:      state->deckCount[nextPlayer]++;
    #####: 1259:      state->discard[nextPlayer][i] = -1;
    #####: 1260:      state->discardCount[nextPlayer]--;
    #####: 1261:    }
        -: 1262:          
    #####: 1263:    shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1264:  } 
    #####: 1265:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1266:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1267:  state->deckCount[nextPlayer]--;
    #####: 1268:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1269:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1270:  state->deckCount[nextPlayer]--;
        -: 1271:      }    
        -: 1272:           
    #####: 1273:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1274:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1275:  state->playedCardCount++;
    #####: 1276:  tributeRevealedCards[1] = -1;
    #####: 1277:      }
        -: 1278:
    #####: 1279:      for (i = 0; i <= 2; i ++){
    #####: 1280:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1281:    state->coins += 2;
    #####: 1282:  }
        -: 1283:        
    #####: 1284:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1285:    drawCard(currentPlayer, state);
    #####: 1286:    drawCard(currentPlayer, state);
    #####: 1287:  }
        -: 1288:  else{//Action Card
    #####: 1289:    state->numActions = state->numActions + 2;
        -: 1290:  }
    #####: 1291:      }
        -: 1292:      
    #####: 1293:      return 0;
        -: 1294:    
        -: 1295:   
        -: 1296:
        -: 1297:/*********************************************************************/
        -: 1298:
        -: 1299:
        -: 1300:
        -: 1301:
        -: 1302:
        -: 1303:    case ambassador:
    #####: 1304:      j = 0;    //used to check if player has enough cards to discard
        -: 1305:
    #####: 1306:      if (choice2 > 2 || choice2 < 0)
        -: 1307:  {
    #####: 1308:    return -1;        
        -: 1309:  }
        -: 1310:
    #####: 1311:      if (choice1 == handPos)
        -: 1312:  {
    #####: 1313:    return -1;
        -: 1314:  }
        -: 1315:
    #####: 1316:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1317:  {
    #####: 1318:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1319:      {
    #####: 1320:        j++;
    #####: 1321:      }
    #####: 1322:  }
    #####: 1323:      if (j < choice2)
        -: 1324:  {
    #####: 1325:    return -1;        
        -: 1326:  }
        -: 1327:
        -: 1328:      if (DEBUG) 
        -: 1329:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1330:
        -: 1331:      //increase supply count for choosen card by amount being discarded
    #####: 1332:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1333:      
        -: 1334:      //each other player gains a copy of revealed card
    #####: 1335:      for (i = 0; i < state->numPlayers; i++)
        -: 1336:  {
    #####: 1337:    if (i != currentPlayer)
        -: 1338:      {
    #####: 1339:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1340:      }
    #####: 1341:  }
        -: 1342:
        -: 1343:      //discard played card from hand
    #####: 1344:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1345:
        -: 1346:      //trash copies of cards returned to supply
    #####: 1347:      for (j = 0; j < choice2; j++)
        -: 1348:  {
    #####: 1349:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1350:      {
    #####: 1351:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1352:    {
    #####: 1353:      discardCard(i, currentPlayer, state, 1);
    #####: 1354:      break;
        -: 1355:    }
    #####: 1356:      }
    #####: 1357:  }     
        -: 1358:
    #####: 1359:      return 0;
        -: 1360:    
        -: 1361:   
        -: 1362:
        -: 1363:/********************************/
        -: 1364:
        -: 1365:
        -: 1366:
        -: 1367:
        -: 1368:
        -: 1369:
        -: 1370:    case cutpurse:
        -: 1371:
    #####: 1372:      updateCoins(currentPlayer, state, 2);
    #####: 1373:      for (i = 0; i < state->numPlayers; i++)
        -: 1374:  {
    #####: 1375:    if (i != currentPlayer)
        -: 1376:      {
    #####: 1377:        for (j = 0; j < state->handCount[i]; j++)
        -: 1378:    {
    #####: 1379:      if (state->hand[i][j] == copper)
        -: 1380:        {
    #####: 1381:          discardCard(j, i, state, 0);
    #####: 1382:          break;
        -: 1383:        }
    #####: 1384:      if (j == state->handCount[i])
        -: 1385:        {
    #####: 1386:          for (k = 0; k < state->handCount[i]; k++)
        -: 1387:      {
        -: 1388:        if (DEBUG)
        -: 1389:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1390:      } 
    #####: 1391:          break;
        -: 1392:        }   
    #####: 1393:    }
        -: 1394:          
    #####: 1395:      }
        -: 1396:        
    #####: 1397:  }       
        -: 1398:
        -: 1399:      //discard played card from hand
    #####: 1400:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1401:
    #####: 1402:      return 0;
        -: 1403:
        -: 1404:    
        -: 1405:    
        -: 1406:
        -: 1407:
        -: 1408:/********************************/
        -: 1409:
        -: 1410:
        -: 1411:
        -: 1412:
        -: 1413:
        -: 1414:
        -: 1415:
        -: 1416:
        -: 1417:
        -: 1418:    case embargo: 
        -: 1419:      //+2 Coins
    #####: 1420:      state->coins = state->coins + 2;
        -: 1421:      
        -: 1422:      //see if selected pile is in play
    #####: 1423:      if ( state->supplyCount[choice1] == -1 )
        -: 1424:  {
    #####: 1425:    return -1;
        -: 1426:  }
        -: 1427:      
        -: 1428:
    #####: 1429:       state->embargoTokens[choice1]++;
        -: 1430:      
        -: 1431:      //trash card
    #####: 1432:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1433:      return 0;
        -: 1434:    
        -: 1435:
        -: 1436:/********************************/
        -: 1437:
        -: 1438:
        -: 1439:   
        -: 1440:
        -: 1441:      
        -: 1442:
        -: 1443:
        -: 1444:
        -: 1445:      // call outpost function 
        -: 1446:      case outpost:
    #####: 1447:      outpostFunction(currentPlayer,handPos,state);
    #####: 1448:      return 0;
        -: 1449:
        -: 1450:
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:
        -: 1456:
        -: 1457:      // call salvegerFunction
        -: 1458:      case salvager:
    #####: 1459:      salvagerFunction(currentPlayer,handPos,choice1,state);
    #####: 1460:      return 0 ;
        -: 1461:
        -: 1462:
        -: 1463:
        -: 1464:
        -: 1465:
        -: 1466:  /********************************/
        -: 1467:
        -: 1468:
        -: 1469:
        -: 1470:
        -: 1471:    
        -: 1472:
        -: 1473:
        -: 1474:
        -: 1475:
        -: 1476:
        -: 1477:    case sea_hag:
    #####: 1478:      for (i = 0; i < state->numPlayers; i++){
    #####: 1479:  if (i != currentPlayer){
    #####: 1480:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1481:    state->discardCount[i]++;
    #####: 1482:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1483:  }
    #####: 1484:      }
    #####: 1485:      return 0;
        -: 1486:    
        -: 1487:   
        -: 1488:
        -: 1489:
        -: 1490:/********************************/
        -: 1491:
        -: 1492:
        -: 1493:
        -: 1494:
        -: 1495:    case treasure_map:
        -: 1496:      //search hand for another treasure_map
    #####: 1497:      index = -1;
    #####: 1498:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1499:  {
    #####: 1500:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1501:      {
    #####: 1502:        index = i;
    #####: 1503:        break;
        -: 1504:      }
    #####: 1505:  }
    #####: 1506:      if (index > -1)
        -: 1507:  {
        -: 1508:    //trash both treasure cards
    #####: 1509:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1510:    discardCard(index, currentPlayer, state, 1);
        -: 1511:
        -: 1512:    //gain 4 Gold cards
    #####: 1513:    for (i = 0; i < 4; i++)
        -: 1514:      {
    #####: 1515:        gainCard(gold, state, 1, currentPlayer);
    #####: 1516:      }
        -: 1517:        
        -: 1518:    //return success
    #####: 1519:    return 1;
        -: 1520:  }
        -: 1521:      
        -: 1522:      //no second treasure_map found in hand
    #####: 1523:      return -1;
        -: 1524:    }
        -: 1525:  
    #####: 1526:  return -1;
    50000: 1527:}
        -: 1528:
        -: 1529:/********************************/
        -: 1530:
        -: 1531:
        -: 1532:
        -: 1533:
        -: 1534:
        -: 1535:
        -: 1536:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1537:{
        -: 1538:  
        -: 1539:  //if card is not trashed, added to Played pile 
    80000: 1540:  if (trashFlag < 1)
        -: 1541:    {
        -: 1542:      //add card to played pile
    80000: 1543:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    80000: 1544:      state->playedCardCount++;
    80000: 1545:    }
        -: 1546:  
        -: 1547:  //set played card to -1
    80000: 1548:  state->hand[currentPlayer][handPos] = -1;
        -: 1549:  
        -: 1550:  //remove card from player's hand
    80000: 1551:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1552:    {
        -: 1553:      //reduce number of cards in hand
    #####: 1554:      state->handCount[currentPlayer]--;
    #####: 1555:    }
    80000: 1556:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1557:    {
        -: 1558:      //reduce number of cards in hand
    #####: 1559:      state->handCount[currentPlayer]--;
    #####: 1560:    }
        -: 1561:  else  
        -: 1562:    {
        -: 1563:      //replace discarded card with last card in hand
    80000: 1564:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1565:      //set last card to -1
    80000: 1566:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1567:      //reduce number of cards in hand
    80000: 1568:      state->handCount[currentPlayer]--;
        -: 1569:    }
        -: 1570:  
    80000: 1571:  return 0;
        -: 1572:}
        -: 1573:
        -: 1574:
        -: 1575:
        -: 1576:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1577:{
        -: 1578:  //Note: supplyPos is enum of choosen card
        -: 1579:  
        -: 1580:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1581:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1582:    {
    #####: 1583:      return -1;
        -: 1584:    }
        -: 1585:  
        -: 1586:  //added card for [whoseTurn] current player:
        -: 1587:  // toFlag = 0 : add to discard
        -: 1588:  // toFlag = 1 : add to deck
        -: 1589:  // toFlag = 2 : add to hand
        -: 1590:
    #####: 1591:  if (toFlag == 1)
        -: 1592:    {
    #####: 1593:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1594:      state->deckCount[player]++;
    #####: 1595:    }
    #####: 1596:  else if (toFlag == 2)
        -: 1597:    {
    #####: 1598:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1599:      state->handCount[player]++;
    #####: 1600:    }
        -: 1601:  else
        -: 1602:    {
    #####: 1603:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1604:      state->discardCount[player]++;
        -: 1605:    }
        -: 1606:  
        -: 1607:  //decrease number in supply pile
    #####: 1608:  state->supplyCount[supplyPos]--;
        -: 1609:   
    #####: 1610:  return 0;
    #####: 1611:}
        -: 1612:
        -: 1613:
        -: 1614:
        -: 1615:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1616:{
        -: 1617:  int i;
        -: 1618:  
        -: 1619:  //reset coin count
    #####: 1620:  state->coins = 0;
        -: 1621:
        -: 1622:  //add coins for each Treasure card in player's hand
    #####: 1623:  for (i = 0; i < state->handCount[player]; i++)
        -: 1624:    {
    #####: 1625:      if (state->hand[player][i] == copper)
        -: 1626:  {
    #####: 1627:    state->coins += 1;
    #####: 1628:  }
    #####: 1629:      else if (state->hand[player][i] == silver)
        -: 1630:  {
    #####: 1631:    state->coins += 2;
    #####: 1632:  }
    #####: 1633:      else if (state->hand[player][i] == gold)
        -: 1634:  {
    #####: 1635:    state->coins += 3;
    #####: 1636:  } 
    #####: 1637:    } 
        -: 1638:
        -: 1639:  //add bonus
    #####: 1640:  state->coins += bonus;
        -: 1641:
    #####: 1642:  return 0;
        -: 1643:}
        -: 1644:
        -: 1645:
        -: 1646://end of dominion.c
        -: 1647:
