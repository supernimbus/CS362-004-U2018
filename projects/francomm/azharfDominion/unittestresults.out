Result for running dominion tests (Assignment 3):

******TESTING updateCoins() ******
Test player 0 with 1 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 1, expected = 1
TEST PASSED!
G.coins = 1, expected = 1
TEST PASSED!
G.coins = 2, expected = 2
TEST PASSED!
Test player 0 with 1 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 2, expected = 2
TEST PASSED!
G.coins = 2, expected = 2
TEST PASSED!
G.coins = 3, expected = 3
TEST PASSED!
Test player 0 with 1 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 3, expected = 3
TEST PASSED!
G.coins = 3, expected = 3
TEST PASSED!
G.coins = 4, expected = 4
TEST PASSED!
Test player 0 with 1 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 4, expected = 4
TEST PASSED!
G.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
Test player 0 with 1 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 5, expected = 5
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
Test player 0 with 1 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
Test player 0 with 1 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
Test player 0 with 1 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
Test player 0 with 1 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 0 with 1 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 0 with 1 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 0 with 2 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 3, expected = 3
TEST PASSED!
G.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
Test player 0 with 2 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
Test player 0 with 2 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
Test player 0 with 2 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
Test player 0 with 2 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
Test player 0 with 2 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 0 with 2 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 0 with 2 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 0 with 2 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 0 with 2 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 0 with 2 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 0 with 3 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
Test player 0 with 3 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
Test player 0 with 3 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
Test player 0 with 3 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 0 with 3 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 0 with 3 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 0 with 3 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 0 with 3 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 0 with 3 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 0 with 3 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
Test player 0 with 3 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 14, expected = 14
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
Test player 0 with 4 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 0 with 4 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 0 with 4 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 0 with 4 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 0 with 4 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 0 with 4 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 0 with 4 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
Test player 0 with 4 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
Test player 0 with 4 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 20, expected = 20
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
Test player 0 with 4 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 21, expected = 21
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
G.coins = 19, expected = 19
TEST PASSED!
Test player 0 with 4 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 22, expected = 22
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 16, expected = 16
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
G.coins = 20, expected = 20
TEST PASSED!
Test player 0 with 5 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 0 with 5 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 0 with 5 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 0 with 5 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 0 with 5 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
Test player 0 with 5 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 20, expected = 20
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
Test player 0 with 5 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 21, expected = 21
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
Test player 0 with 5 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 22, expected = 22
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
G.coins = 19, expected = 19
TEST PASSED!
Test player 0 with 5 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 23, expected = 23
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
G.coins = 20, expected = 20
TEST PASSED!
Test player 0 with 5 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 24, expected = 24
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 16, expected = 16
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
G.coins = 21, expected = 21
TEST PASSED!
Test player 0 with 5 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 20, expected = 20
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 25, expected = 25
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 17, expected = 17
TEST PASSED!
G.coins = 19, expected = 19
TEST PASSED!
G.coins = 22, expected = 22
TEST PASSED!
Test player 1 with 1 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 1, expected = 1
TEST PASSED!
G.coins = 1, expected = 1
TEST PASSED!
G.coins = 2, expected = 2
TEST PASSED!
Test player 1 with 1 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 2, expected = 2
TEST PASSED!
G.coins = 2, expected = 2
TEST PASSED!
G.coins = 3, expected = 3
TEST PASSED!
Test player 1 with 1 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 3, expected = 3
TEST PASSED!
G.coins = 3, expected = 3
TEST PASSED!
G.coins = 4, expected = 4
TEST PASSED!
Test player 1 with 1 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 4, expected = 4
TEST PASSED!
G.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
Test player 1 with 1 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 5, expected = 5
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
Test player 1 with 1 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
Test player 1 with 1 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
Test player 1 with 1 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
Test player 1 with 1 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 1 with 1 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 1 with 1 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 1 with 2 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 3, expected = 3
TEST PASSED!
G.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
Test player 1 with 2 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
Test player 1 with 2 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
Test player 1 with 2 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
Test player 1 with 2 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
Test player 1 with 2 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 1 with 2 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 1 with 2 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 1 with 2 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 1 with 2 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 1 with 2 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 1 with 3 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 4, expected = 4
TEST PASSED!
G.coins = 5, expected = 5
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
Test player 1 with 3 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 5, expected = 5
TEST PASSED!
G.coins = 6, expected = 6
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
Test player 1 with 3 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 7, expected = 7
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
Test player 1 with 3 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 1 with 3 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 1 with 3 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 1 with 3 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 1 with 3 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 1 with 3 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 1 with 3 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
Test player 1 with 3 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 14, expected = 14
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
Test player 1 with 4 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 6, expected = 6
TEST PASSED!
G.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
Test player 1 with 4 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
Test player 1 with 4 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 1 with 4 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 1 with 4 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 1 with 4 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 1 with 4 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
Test player 1 with 4 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
Test player 1 with 4 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 20, expected = 20
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
Test player 1 with 4 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 21, expected = 21
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
G.coins = 19, expected = 19
TEST PASSED!
Test player 1 with 4 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 22, expected = 22
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 16, expected = 16
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
G.coins = 20, expected = 20
TEST PASSED!
Test player 1 with 5 treasure card(s) and 0 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 0, expected = 0
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 7, expected = 7
TEST PASSED!
G.coins = 9, expected = 9
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
Test player 1 with 5 treasure card(s) and 1 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 1, expected = 1
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 8, expected = 8
TEST PASSED!
G.coins = 10, expected = 10
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
Test player 1 with 5 treasure card(s) and 2 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 2, expected = 2
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 9, expected = 9
TEST PASSED!
G.coins = 11, expected = 11
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
Test player 1 with 5 treasure card(s) and 3 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 3, expected = 3
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 10, expected = 10
TEST PASSED!
G.coins = 12, expected = 12
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
Test player 1 with 5 treasure card(s) and 4 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 4, expected = 4
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 11, expected = 11
TEST PASSED!
G.coins = 13, expected = 13
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
Test player 1 with 5 treasure card(s) and 5 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 20, expected = 20
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 5, expected = 5
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 12, expected = 12
TEST PASSED!
G.coins = 14, expected = 14
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
Test player 1 with 5 treasure card(s) and 6 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 11, expected = 11
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 16, expected = 16
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 21, expected = 21
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 6, expected = 6
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 13, expected = 13
TEST PASSED!
G.coins = 15, expected = 15
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
Test player 1 with 5 treasure card(s) and 7 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 12, expected = 12
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 17, expected = 17
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 22, expected = 22
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 7, expected = 7
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 14, expected = 14
TEST PASSED!
G.coins = 16, expected = 16
TEST PASSED!
G.coins = 19, expected = 19
TEST PASSED!
Test player 1 with 5 treasure card(s) and 8 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 13, expected = 13
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 18, expected = 18
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 23, expected = 23
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 8, expected = 8
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 15, expected = 15
TEST PASSED!
G.coins = 17, expected = 17
TEST PASSED!
G.coins = 20, expected = 20
TEST PASSED!
Test player 1 with 5 treasure card(s) and 9 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 14, expected = 14
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 19, expected = 19
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 24, expected = 24
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 9, expected = 9
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 16, expected = 16
TEST PASSED!
G.coins = 18, expected = 18
TEST PASSED!
G.coins = 21, expected = 21
TEST PASSED!
Test player 1 with 5 treasure card(s) and 10 bonus.
TEST PASSED!
Test case 1: hand only contains copper coinsG.coins = 15, expected = 15
TEST PASSED!
Test case 2: hand only contains silver coinsG.coins = 20, expected = 20
TEST PASSED!
Test case 3: hand only contains gold coinsG.coins = 25, expected = 25
TEST PASSED!
Test case 4: hand contains no coinsG.coins = 10, expected = 10
TEST PASSED!
Test case 5: hand contains copper and silver coinsG.coins = 17, expected = 17
TEST PASSED!
G.coins = 19, expected = 19
TEST PASSED!
G.coins = 22, expected = 22
TEST PASSED!
******
Tests failed = 0
*************END OF TEST RESULTS******************
TEST PASSED!
******TESTING initializeGame() ******
Testing to check if maximum number of player threshold works correctly...
TEST PASSED!
Testing to check if minimum number of players thresholds work correctly...
TEST PASSED!
Testing to check number of players was set correctly...
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing to check if first player has the next turn after initializeGame()
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing to check if decks were initialized correctly... (7 coppers, 3 estates)
Testing with 2 players 
TEST PASSED!
Testing with 3 players 
TEST PASSED!
Testing with 4 players 
TEST PASSED!
Testing starting ammounts...
Testing with 2 players... 
Checking starting ammounts of great_hall and gardens cards... (2 players) 
TEST PASSED!
Checking starting ammounts of remaining cards... (2 players)
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing with 3 players... 
Checking starting ammounts of great_hall and gardens cards... (3 players) 
TEST PASSED!
Checking starting ammounts of remaining cards... (3 players)
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing with 4 players... 
Checking starting ammounts of great_hall and gardens cards... (4 players) 
TEST PASSED!
Checking starting ammounts of remaining cards... (4 players)
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing to make sure that embargo tokens are set to 0 for each pile...
Testing with 2 players 
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing with 3 players 
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing with 4 players 
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Testing to make sure that each player has an initialized hand...
Testing with 2 players 
TEST PASSED!
******TEST FAILED!******
Testing with 3 players 
TEST PASSED!
******TEST FAILED!******
******TEST FAILED!******
Testing with 4 players 
TEST PASSED!
******TEST FAILED!******
******TEST FAILED!******
******TEST FAILED!******
Testing to check that player 0 is set to go first...
Testing with 2 players 
TEST PASSED!
Testing with 3 players 
TEST PASSED!
Testing with 4 players 
TEST PASSED!
ERROR COUNT = 6
*************END OF TEST RESULTS******************
******TESTING isGameOver() ******
Checking with new initialized game...
TEST PASSED!
Checking with empty province pile (game should be over)...
TEST PASSED!
Checking with one pile empty (game should not be over)...
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Checking with one empty coin pile (game should not be over)...
TEST PASSED!
TEST PASSED!
TEST PASSED!
Checking with two piles empty (game should not be over)...
TEST PASSED!
Checking with three piles empty (game should be over)...
TEST PASSED!
Error count: 0
*************END OF TEST RESULTS******************
******TESTING whosTurn() ******
Check with fresly initialized game + varying number of players...
TEST PASSED!
TEST PASSED!
TEST PASSED!
Checking with two players (setting second player to have next turn)...
TEST PASSED!
Checking with three to MAX_PLAYERS...
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
Checking next turn using endTurn()...
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
TEST PASSED!
ERROR COUNT: 0
*************END OF TEST RESULTS******************
----------------- Testing Card: smithy ----------------
Checking to make sure that current player recieves exactly three cards.
hand count = 8, expected = 7
******TEST FAILED!******
Checking to make sure that current player's deck count decreases by 3 cards...
******TEST FAILED!******
Checking to make sure cards in player 1's deck did not change.
TEST PASSED!
Checking to make sure cards in player 1's hand did not change.
second player's hand count = 0, expected 0
TEST PASSED!
Checking to make sure number of buys did not change.
TEST PASSED!
Checking to make sure number of actions did not change.
TEST PASSED!
Checking to make sure it is still player 0's turn.
TEST PASSED!
Error Count: 2
*************END OF TEST RESULTS******************
TEST PASSED!
----------------- Testing Card: adventurer ----------------
Checking case in which the player has less than 2 Treasure cards in his deck....
Printing hand contents before test:
8 8 8 8 8 
Printing deck contents before test:
8 8 8 8 8 
Printing hand contents after test:

Printing deck contetns after test:

Checking to make sure that hand size did not change...
******TEST FAILED!******
Checking to make sure that deck size is zero...
TEST PASSED!
Case 1A: deck only conains one treasure card.
Checking to make sure that deck size is zero...
TEST PASSED!
Checking to make sure that hand size increased by 1...
TEST PASSED!
Case 2A: Deck contains exactly 2 treasure cards.
Case2A.1: 1 Copper, 1 Sliver.
checking to make sure hand size increased by 2 and deck size + discard size decreased by 2...
Checking deckCount + discardCount delta...
TEST PASSED!
Checking handCount...
TEST PASSED!
Case2A.2: 1 Sliver, 1 Gold.
checking to make sure hand size increased by 2 and deck size + discard size decreased by 2...
Checking deckCount + discardCount delta...
TEST PASSED!
Checking handCount...
TEST PASSED!
checking that state does not change for player 1 when player 0 plays card...
TEST PASSED!
TEST PASSED!
checking to make sure it is still player 0's turn
TEST PASSED!
-------------------End of Test------------------------------------
TEST PASSED!
----------------- Testing Card: council_room ----------------
Checking that player gets 4 cards...
Make sure that deck decreased in size by 4 cards... 
Prev deck size: 5, current deck size: 0
******TEST FAILED!******
Check that hand size increased by 3...
Prev hand size: 5, current hand size: 9
******TEST FAILED!******
Checking that player gets extra buy...
******TEST FAILED!******
Checking that other player draws one card (2 players)
TEST PASSED!
CChecking that other players draw one card (3 players)
TEST PASSED!
Checking that player deck size goes down by one...
Deck size was greater than 0...
TEST PASSED!
Testing to make sure it is still player 0's turn...
TEST PASSED!
Error count: 3
-------------------End of Test------------------------------------
----------------- Testing Card: great_hall ----------------
Test that the number of actions has increased by 1.
TEST PASSED!
Test that the number of cards drawn after playing card is 1.
TEST PASSED!
Test that hand count did not increase or decrease.
TEST PASSED!
Test that the number of played cards by player0 increased by 1.
TEST PASSED!
Test that it is still player 0's turn.
TEST PASSED!
-------------------End of Test------------------------------------
File 'dominion.c'
Lines executed:36.35% of 564
Branches executed:32.37% of 417
Taken at least once:26.38% of 417
Calls executed:25.26% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:
function compare called 5027 returned 100% blocks executed 83%
     5027:   10:int compare(const void* a, const void* b) {
     5027:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   12:    return 1;
unconditional  0 never executed
     5027:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     1340:   14:    return -1;
unconditional  0 taken 100%
     3687:   15:  return 0;
unconditional  0 taken 100%
        -:   16:}
        -:   17:
        -:   18:
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
    #####:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
unconditional  0 never executed
        -:   23:}
        -:   24:
        -:   25:
        -:   26:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:      int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
unconditional  0 never executed
        -:   41:}
        -:   42:
function initializeGame called 151 returned 100% blocks executed 97%
      151:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:       struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;     
        -:   49:  //set up random number generator
      151:   50:  SelectStream(1);
call    0 returned 100%
      151:   51:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   52:  
        -:   53:  //check number of players
      151:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   55:    {
        2:   56:      return -1;
unconditional  0 taken 100%
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
      149:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
     1639:   63:  for (i = 0; i < 10; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 91%
branch  3 taken 9% (fallthrough)
        -:   64:    {
    16390:   65:      for (j = 0; j < 10; j++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 91%
branch  3 taken 9% (fallthrough)
        -:   66:        {
    14900:   67:    if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   68:      {
    #####:   69:        return -1;
unconditional  0 never executed
        -:   70:      }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
      149:   79:  if (numPlayers == 2)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
        -:   80:    {
      125:   81:      state->supplyCount[curse] = 10;
unconditional  0 taken 100%
        -:   82:    }
       24:   83:  else if (numPlayers == 3)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
        -:   84:    {
       11:   85:      state->supplyCount[curse] = 20;
unconditional  0 taken 100%
        -:   86:    }
        -:   87:  else
        -:   88:    {
       13:   89:      state->supplyCount[curse] = 30;
unconditional  0 taken 100%
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
      149:   93:  if (numPlayers == 2)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
        -:   94:    {
      125:   95:      state->supplyCount[estate] = 8;
      125:   96:      state->supplyCount[duchy] = 8;
      125:   97:      state->supplyCount[province] = 8;
unconditional  0 taken 100%
        -:   98:    }
        -:   99:  else
        -:  100:    {
       24:  101:      state->supplyCount[estate] = 12;
       24:  102:      state->supplyCount[duchy] = 12;
       24:  103:      state->supplyCount[province] = 12;
unconditional  0 taken 100%
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
      149:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      149:  108:  state->supplyCount[silver] = 40;
      149:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
     3129:  112:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 95%
branch  3 taken 5% (fallthrough)
        -:  113:    {
    24585:  114:      for (j = 0; j < 10; j++)              //loop chosen cards
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 94%
branch  3 taken 6% (fallthrough)
        -:  115:  {
    23095:  116:    if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  117:      {
        -:  118:        //check if card is a 'Victory' Kingdom card
     1490:  119:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  120:    {
      596:  121:      if (numPlayers == 2){ 
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
unconditional  2 taken 100%
      250:  122:        state->supplyCount[i] = 8; 
unconditional  0 taken 100%
        -:  123:      }
       48:  124:      else{ state->supplyCount[i] = 12; }
unconditional  0 taken 100%
        -:  125:    }
        -:  126:        else
        -:  127:    {
     1192:  128:      state->supplyCount[i] = 10;
unconditional  0 taken 100%
        -:  129:    }
     1490:  130:        break;
unconditional  0 taken 100%
        -:  131:      }
        -:  132:    else    //card is not in the set choosen for the game
        -:  133:      {
    21605:  134:        state->supplyCount[i] = -1;
        -:  135:      }
        -:  136:  }
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
      484:  144:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 69%
branch  3 taken 31% (fallthrough)
        -:  145:    {
      335:  146:      state->deckCount[i] = 0;
     1340:  147:      for (j = 0; j < 3; j++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 75%
branch  3 taken 25% (fallthrough)
        -:  148:  {
     1005:  149:    state->deck[i][j] = estate;
     1005:  150:    state->deckCount[i]++;
        -:  151:  }
     2680:  152:      for (j = 3; j < 10; j++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 88%
branch  3 taken 13% (fallthrough)
        -:  153:  {
     2345:  154:    state->deck[i][j] = copper;
     2345:  155:    state->deckCount[i]++;    
        -:  156:  }
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
      484:  160:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 69%
branch  3 taken 31% (fallthrough)
        -:  161:    {
      335:  162:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:  {
    #####:  164:    return -1;
unconditional  0 never executed
        -:  165:  }
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
      484:  169:  for (i = 0; i < numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 69%
branch  3 taken 31% (fallthrough)
        -:  170:    {  
        -:  171:      //initialize hand size to zero
      335:  172:      state->handCount[i] = 0;
      335:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //  {
        -:  177:      //    drawCard(i, state);
        -:  178:      //  }
        -:  179:    }
        -:  180:  
        -:  181:  //set embargo tokens to 0 for all supply piles
     4172:  182:  for (i = 0; i <= treasure_map; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 96%
branch  3 taken 4% (fallthrough)
        -:  183:    {
     4023:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
      149:  188:  state->outpostPlayed = 0;
      149:  189:  state->phase = 0;
      149:  190:  state->numActions = 1;
      149:  191:  state->numBuys = 1;
      149:  192:  state->playedCardCount = 0;
      149:  193:  state->whoseTurn = 0;
      149:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
      894:  198:  for (it = 0; it < 5; it++){
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
      745:  199:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  200:  }
        -:  201:
      149:  202:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  203:
      149:  204:  return 0;
unconditional  0 taken 100%
        -:  205:}
        -:  206:
function shuffle called 367 returned 100% blocks executed 100%
      367:  207:int shuffle(int player, struct gameState *state) {
        -:  208: 
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
      367:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
      367:  215:  if (state->deckCount[player] < 1)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       31:  216:    return -1;
unconditional  0 taken 100%
      336:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
     4025:  220:  while (state->deckCount[player] > 0) {
unconditional  0 taken 100%
branch  1 taken 91%
branch  2 taken 9% (fallthrough)
     3353:  221:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     3353:  222:    newDeck[newDeckPos] = state->deck[player][card];
     3353:  223:    newDeckPos++;
    11718:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 71%
branch  3 taken 29% (fallthrough)
     8365:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
     3353:  227:    state->deckCount[player]--;
unconditional  0 taken 100%
        -:  228:  }
     3689:  229:  for (i = 0; i < newDeckPos; i++) {
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 91%
branch  3 taken 9% (fallthrough)
     3353:  230:    state->deck[player][i] = newDeck[i];
     3353:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
      336:  234:  return 0;
unconditional  0 taken 100%
unconditional  1 taken 100%
        -:  235:}
        -:  236:
function playCard called 0 returned 0% blocks executed 0%
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  238:{ 
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
unconditional  0 never executed
        -:  246:    }
        -:  247:  
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
unconditional  0 never executed
        -:  252:    }
        -:  253:  
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
call    0 never executed
        -:  256:  
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
unconditional  0 never executed
        -:  261:    }
        -:  262:  
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  265:    {
    #####:  266:      return -1;
unconditional  0 never executed
        -:  267:    }
        -:  268:  
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  274:  
    #####:  275:  return 0;
unconditional  0 never executed
unconditional  1 never executed
        -:  276:}
        -:  277:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
unconditional  0 never executed
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
unconditional  0 never executed
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
unconditional  0 never executed
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  297:    if (DEBUG) 
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
unconditional  0 never executed
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  304:  
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  306:    state->numBuys--;
unconditional  0 never executed
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:    
    #####:  314:  return 0;
unconditional  0 never executed
        -:  315:}
        -:  316:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
unconditional  1 never executed
        -:  319:}
        -:  320:
function handCard called 0 returned 0% blocks executed 0%
    #####:  321:int handCard(int handPos, struct gameState *state) {
    #####:  322:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  323:  return state->hand[currentPlayer][handPos];
unconditional  0 never executed
        -:  324:}
        -:  325:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
unconditional  0 never executed
        -:  328:}
        -:  329:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
    #####:  332:  int count = 0;
        -:  333:
    #####:  334:  for (i = 0; i < state->deckCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  335:    {
    #####:  336:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  340:    {
    #####:  341:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
        -:  342:    }
        -:  343:
    #####:  344:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  345:    {
    #####:  346:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
        -:  347:    }
        -:  348:
    #####:  349:  return count;
unconditional  0 never executed
        -:  350:}
        -:  351:
function whoseTurn called 39 returned 100% blocks executed 100%
       39:  352:int whoseTurn(struct gameState *state) {
       39:  353:  return state->whoseTurn;
unconditional  0 taken 100%
        -:  354:}
        -:  355:
        -:  356:
function endTurn called 9 returned 100% blocks executed 100%
        9:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
        9:  360:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  361:  
        -:  362:  //Discard hand
       54:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
       45:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       45:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
        9:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
        9:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        6:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
unconditional  0 taken 100%
        -:  372:  }
        -:  373:  else{
        3:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
unconditional  0 taken 100%
        -:  375:  }
        -:  376:
        9:  377:  state->outpostPlayed = 0;
        9:  378:  state->phase = 0;
        9:  379:  state->numActions = 1;
        9:  380:  state->coins = 0;
        9:  381:  state->numBuys = 1;
        9:  382:  state->playedCardCount = 0;
        9:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
       54:  387:  for (k = 0; k < 5; k++){
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
       45:  388:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  389:  }
        -:  390:
        -:  391:  //Update money
        9:  392:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  393:
        9:  394:  return 0;
unconditional  0 taken 100%
        -:  395:}
        -:  396:
function isGameOver called 17 returned 100% blocks executed 100%
       17:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:  
        -:  401:  //if stack of Province cards is empty, the game ends
       17:  402:  if (state->supplyCount[province] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  403:    {
        1:  404:      return 1;
unconditional  0 taken 100%
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
       16:  408:  j = 0;
      416:  409:  for (i = 0; i < 25; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 96%
branch  3 taken 4% (fallthrough)
        -:  410:    {
      400:  411:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 96%
        -:  412:  {
       18:  413:    j++;
unconditional  0 taken 100%
        -:  414:  }
        -:  415:    }
       16:  416:  if ( j >= 3)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  417:    {
        1:  418:      return 1;
unconditional  0 taken 100%
        -:  419:    }
        -:  420:
       15:  421:  return 0;
unconditional  0 taken 100%
        -:  422:}
        -:  423:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
    #####:  427:  int score = 0;
        -:  428:  //score from hand
    #####:  429:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  430:    {
    #####:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
unconditional  3 never executed
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
    #####:  440:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  441:    {
    #####:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
unconditional  3 never executed
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
    #####:  451:  for (i = 0; i < state->discardCount[player]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  452:    {
    #####:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
unconditional  2 never executed
    #####:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
unconditional  3 never executed
        -:  459:    }
        -:  460:
    #####:  461:  return score;
unconditional  0 never executed
        -:  462:}
        -:  463:
        -:  464:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;  
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  476:  {
    #####:  477:    players[i] = -9999;
unconditional  0 never executed
        -:  478:  }
        -:  479:      else
        -:  480:  {
    #####:  481:    players[i] = scoreFor (i, state);
call    0 never executed
unconditional  1 never executed
        -:  482:  }
        -:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  490:  {
    #####:  491:    j = i;
unconditional  0 never executed
        -:  492:  }
        -:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  501:  {
    #####:  502:    players[i]++;
unconditional  0 never executed
        -:  503:  }
        -:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  511:  {
    #####:  512:    j = i;
unconditional  0 never executed
        -:  513:  }
        -:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  521:  {
    #####:  522:    players[i] = 1;
unconditional  0 never executed
        -:  523:  }
        -:  524:      else
        -:  525:  {
    #####:  526:    players[i] = 0;
unconditional  0 never executed
        -:  527:  }
        -:  528:    }
        -:  529:
    #####:  530:  return 0;
unconditional  0 never executed
        -:  531:}
        -:  532:
        -:  533:
function drawCard called 850 returned 100% blocks executed 100%
      850:  534:int drawCard(int player, struct gameState *state)
        -:  535:{ int count;
        -:  536:  int deckCounter;
      850:  537:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  538:    
        -:  539:    //Step 1 Shuffle the discard pile back into a deck
        -:  540:    int i;
        -:  541:    //Move discard to deck
       19:  542:    for (i = 0; i < state->discardCount[player];i++){
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 16%
branch  3 taken 84% (fallthrough)
        3:  543:      state->deck[player][i] = state->discard[player][i];
        3:  544:      state->discard[player][i] = -1;
        -:  545:    }
        -:  546:
       16:  547:    state->deckCount[player] = state->discardCount[player];
       16:  548:    state->discardCount[player] = 0;//Reset discard
        -:  549:
        -:  550:    //Shufffle the deck
       16:  551:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  552:   
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  555:    }
        -:  556:    
       16:  557:    state->discardCount[player] = 0;
        -:  558:
        -:  559:    //Step 2 Draw Card
       16:  560:    count = state->handCount[player];//Get current player's hand count
unconditional  0 taken 100%
        -:  561:    
        -:  562:    if (DEBUG){//Debug statements
        -:  563:      printf("Current hand count: %d\n", count);
        -:  564:    }
        -:  565:    
       16:  566:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  567:
       16:  568:    if (deckCounter == 0)
branch  0 taken 94% (fallthrough)
branch  1 taken 6%
       15:  569:      return -1;
unconditional  0 taken 100%
        -:  570:
        1:  571:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  572:    state->deckCount[player]--;
        1:  573:    state->handCount[player]++;//Increment hand count
unconditional  0 taken 100%
        -:  574:  }
        -:  575:
        -:  576:  else{
      834:  577:    int count = state->handCount[player];//Get current hand count for player
unconditional  0 taken 100%
        -:  578:    int deckCounter;
        -:  579:    if (DEBUG){//Debug statements
        -:  580:      printf("Current hand count: %d\n", count);
        -:  581:    }
        -:  582:
      834:  583:    deckCounter = state->deckCount[player];//Create holder for the deck count
      834:  584:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      834:  585:    state->deckCount[player]--;
      834:  586:    state->handCount[player]++;//Increment hand count
unconditional  0 taken 100%
        -:  587:  }
        -:  588:
      835:  589:  return 0;
unconditional  0 taken 100%
        -:  590:}
        -:  591:
        -:  592:
        -:  593:
        -:  594:
        -:  595:
        -:  596:
        -:  597:
function getCost called 0 returned 0% blocks executed 0%
    #####:  598:int getCost(int cardNumber)
        -:  599:{
    #####:  600:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  601:    {
        -:  602:    case curse:
    #####:  603:      return 0;
unconditional  0 never executed
        -:  604:    case estate:
    #####:  605:      return 2;
unconditional  0 never executed
        -:  606:    case duchy:
    #####:  607:      return 5;
unconditional  0 never executed
        -:  608:    case province:
    #####:  609:      return 8;
unconditional  0 never executed
        -:  610:    case copper:
    #####:  611:      return 0;
unconditional  0 never executed
        -:  612:    case silver:
    #####:  613:      return 3;
unconditional  0 never executed
        -:  614:    case gold:
    #####:  615:      return 6;
unconditional  0 never executed
        -:  616:
        -:  617:
        -:  618:
        -:  619:
        -:  620:
        -:  621:    case adventurer:
    #####:  622:      return 6;
unconditional  0 never executed
        -:  623:    
        -:  624:
        -:  625:
        -:  626:
        -:  627:    case council_room:
    #####:  628:      return 5;
unconditional  0 never executed
        -:  629:    case feast:
    #####:  630:      return 4;
unconditional  0 never executed
        -:  631:   
        -:  632:    case gardens:
    #####:  633:      return 4;
unconditional  0 never executed
        -:  634:    case mine:
    #####:  635:      return 5;
unconditional  0 never executed
        -:  636:    case remodel:
    #####:  637:      return 4;
unconditional  0 never executed
        -:  638:
        -:  639:
        -:  640:
        -:  641:    case smithy:
    #####:  642:      return 4;
unconditional  0 never executed
        -:  643:    
        -:  644:
        -:  645:
        -:  646:
        -:  647:
        -:  648:
        -:  649:    case village:
    #####:  650:      return 3;
unconditional  0 never executed
        -:  651:    case baron:
    #####:  652:      return 4;
unconditional  0 never executed
        -:  653:    case great_hall:
    #####:  654:      return 3;
unconditional  0 never executed
        -:  655:    case minion:
    #####:  656:      return 5;
unconditional  0 never executed
        -:  657:    case steward:
    #####:  658:      return 3;
unconditional  0 never executed
        -:  659:    case tribute:
    #####:  660:      return 5;
unconditional  0 never executed
        -:  661:    case ambassador:
    #####:  662:      return 3;
unconditional  0 never executed
        -:  663:    case cutpurse:
    #####:  664:      return 4;
unconditional  0 never executed
        -:  665:    case embargo: 
    #####:  666:      return 2;
unconditional  0 never executed
        -:  667:    case outpost:
    #####:  668:      return 5;
unconditional  0 never executed
        -:  669:    case salvager:
    #####:  670:      return 4;
unconditional  0 never executed
        -:  671:    case sea_hag:
    #####:  672:      return 4;
unconditional  0 never executed
        -:  673:    case treasure_map:
    #####:  674:      return 4;
unconditional  0 never executed
        -:  675:    }
        -:  676:  
    #####:  677:  return -1;
unconditional  0 never executed
        -:  678:}
        -:  679:
        -:  680:
        -:  681:
        -:  682:
        -:  683:
        -:  684:
        -:  685:// adventurerFunction created (REFACTORING)
        -:  686:// For the function Adventure, we should add a variable, and add a 
        -:  687:// parameter to the function. We should also add a structure, and a 
        -:  688:// pointer to a given variable
        -:  689:
function adventurerFunction called 5 returned 100% blocks executed 100%
        5:  690:void adventurerFunction(int currentPlayer, int temphand[], int z, struct gameState *state){
        -:  691:
        -:  692:  int cardDrawn;
        5:  693:  int drawntreasure = 0;
        -:  694:
        -:  695:  // we should have 3 cards revealed from the deck instead of 2 that was originally
        -:  696:  // placed
        -:  697:
        -:  698:    // bug
        -:  699:    
       46:  700: while(drawntreasure<3){
unconditional  0 taken 100%
branch  1 taken 88%
branch  2 taken 12% (fallthrough)
        -:  701:  
       36:  702:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
       16:  703:    shuffle(currentPlayer, state);
call    0 returned 100%
unconditional  1 taken 100%
        -:  704:  }
       36:  705:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  706:  
        -:  707:
        -:  708:
       36:  709:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       36:  710:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       15:  711:    drawntreasure++;
unconditional  0 taken 100%
        -:  712:  else{
       21:  713:    temphand[z]=cardDrawn;
       21:  714:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       21:  715:    z++;
unconditional  0 taken 100%
        -:  716:  }
        -:  717:  }
        -:  718:
        -:  719:
        -:  720:    // here we omit the return 0 as it is not required as given previoulsy in the case
       31:  721:      while(z-1 >=0){
unconditional  0 taken 100%
branch  1 taken 81%
branch  2 taken 19% (fallthrough)
       21:  722:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       21:  723:      z=z-1;
unconditional  0 taken 100%
        -:  724:      }
        5:  725:    }
        -:  726:
        -:  727:
        -:  728:// FunctionSmithy created (Refactored)
        -:  729:
function smithyFunction called 1 returned 100% blocks executed 100%
        1:  730:void smithyFunction(int currentPlayer, int handPos,struct gameState *state){
        -:  731:
        -:  732:   // for loop enforced in function
        -:  733:
        -:  734:    // bug detected
        5:  735:  for ( int i = 0; i<4;i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 80%
branch  3 taken 20% (fallthrough)
        -:  736:  {
        -:  737:
        4:  738:    drawCard(currentPlayer,state);
call    0 returned 100%
        -:  739:
        -:  740:  }
        -:  741:
        -:  742:        //discard card from hand
        1:  743:        discardCard(handPos, currentPlayer,state,0);
call    0 returned 100%
        -:  744:
        -:  745:        // Since void function we dont return 0
        1:  746:}
        -:  747:
        -:  748:
        -:  749:
        -:  750:// function_council_room created (refactored)
        -:  751:
function council_roomFunction called 3 returned 100% blocks executed 100%
        3:  752:void council_roomFunction( int currentPlayer, int handPos, struct gameState *state){
        -:  753:
        -:  754:    // bug detected
        -:  755:   
       18:  756:   for( int i = 0; i<5 ; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        -:  757:    {
        -:  758:
       15:  759:      drawCard(currentPlayer,state);
call    0 returned 100%
        -:  760:    }
        -:  761:
        -:  762:      //+1 Buy
        3:  763:    state->numBuys++;
        -:  764:
        -:  765:
        -:  766:      //Each other player draws a card
       10:  767:      for (int i = 0; i < state->numPlayers; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 70%
branch  3 taken 30% (fallthrough)
        -:  768:  {
        7:  769:    if ( i != currentPlayer )
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        -:  770:      {
        4:  771:        drawCard(i, state);
call    0 returned 100%
unconditional  1 taken 100%
        -:  772:      }
        -:  773:  }
        -:  774:
        -:  775:  // put played card in placed card pile
        3:  776:  discardCard(handPos,currentPlayer,state, 0);
call    0 returned 100%
        -:  777:
        3:  778:}
        -:  779:
        -:  780:// functionSalvager created(refactored)
        -:  781:
function salvagerFunction called 0 returned 0% blocks executed 0%
    #####:  782:void salvagerFunction(int choice1,int handPos,int currentPlayer,struct gameState *state)
        -:  783:{
        -:  784:  
        -:  785:
        -:  786:  //+1 buy
    #####:  787:      state->numBuys++;
        -:  788:      
    #####:  789:      if (choice1)
branch  0 never executed
branch  1 never executed
        -:  790:  {
        -:  791:    //gain coins equal to trashed card
    #####:  792:    state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -:  793:   
        -:  794:    //trash card
    #####:  795:    discardCard(choice1, currentPlayer, state, 1);  
call    0 never executed
unconditional  1 never executed
        -:  796:  }
        -:  797:      
        -:  798:      //discard card
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  800:    
    #####:  801:}
        -:  802:
        -:  803:
        -:  804:
        -:  805:
        -:  806:// outpostFunction (REFACTORED)
function outpostFunction called 0 returned 0% blocks executed 0%
    #####:  807:void outpostFunction(int handPos,int currentPlayer, struct gameState *state){
        -:  808:
        -:  809: //bug 
        -:  810:
        -:  811:  //set outpost flag
    #####:  812:      state->outpostPlayed++;
        -:  813:      
        -:  814:      //discard card
    #####:  815:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  816:  
    #####:  817:}
        -:  818:
        -:  819:
        -:  820:
        -:  821:
        -:  822:
        -:  823:
function cardEffect called 10 returned 100% blocks executed 6%
       10:  824:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  825:{
        -:  826:  int i;
        -:  827:  int j;
        -:  828:  int k;
        -:  829:  int x;
        -:  830:  int index;
       10:  831:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       10:  832:  int nextPlayer = currentPlayer + 1;
        -:  833:
       10:  834:  int tributeRevealedCards[2] = {-1, -1};
        -:  835:  int temphand[MAX_HAND];// moved above the if statement
       10:  836:  int drawntreasure=0;
        -:  837:  int cardDrawn;
       10:  838:  int z = 0;// this is the counter for the temp hand
       10:  839:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  840:    nextPlayer = 0;
unconditional  0 never executed
        -:  841:  }
        -:  842:  
        -:  843:  
        -:  844:  //uses switch to select card and perform actions
        -:  845:  
        -:  846:
        -:  847:
        -:  848:
       10:  849:  switch( card ) 
branch  0 taken 50%
branch  1 taken 30%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 10%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 10%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  850:    {
        -:  851:    
        -:  852:
        -:  853:
        -:  854:/*********************************************************************/
        -:  855:
        -:  856:
        -:  857:
        -:  858:
        -:  859:    case adventurer:
        -:  860:    // CALL THE FUNCTION
        5:  861:        adventurerFunction(currentPlayer,temphand,z,state);
call    0 returned 100%
        5:  862:        return 0; 
unconditional  0 taken 100%
        -:  863:
        -:  864:
        -:  865:/*********************************************************************/
        -:  866:
        -:  867:
        -:  868:
        -:  869:// call the council_room function
        -:  870:
        -:  871:    case council_room:
        3:  872:          council_roomFunction(currentPlayer,handPos,state);
call    0 returned 100%
        3:  873:          return 0; 
unconditional  0 taken 100%
        -:  874:
        -:  875:
        -:  876:
        -:  877:      
        -:  878:   
        -:  879:
        -:  880:
        -:  881:
        -:  882:/*********************************************************************/
        -:  883:
        -:  884:    
        -:  885:      
        -:  886:
        -:  887:
        -:  888:
        -:  889:    case feast:
        -:  890:      //gain card with cost up to 5
        -:  891:      //Backup hand
    #####:  892:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  893:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  894:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  895:      }
        -:  896:      //Backup hand
        -:  897:
        -:  898:      //Update Coins for Buy
    #####:  899:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  900:      x = 1;//Condition to loop on
    #####:  901:      while( x == 1) {//Buy one card
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
    #####:  902:  if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  903:    if (DEBUG)
        -:  904:      printf("None of that card left, sorry!\n");
        -:  905:
        -:  906:    if (DEBUG){
        -:  907:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  908:    }
        -:  909:  }
    #####:  910:  else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  911:    printf("That card is too expensive!\n");
call    0 never executed
unconditional  1 never executed
        -:  912:
        -:  913:    if (DEBUG){
        -:  914:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  915:    }
        -:  916:  }
        -:  917:  else{
        -:  918:
        -:  919:    if (DEBUG){
        -:  920:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  921:    }
        -:  922:
    #####:  923:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  924:    x = 0;//No more buying cards
unconditional  0 never executed
        -:  925:
        -:  926:    if (DEBUG){
        -:  927:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  928:    }
        -:  929:
        -:  930:  }
        -:  931:      }     
        -:  932:
        -:  933:      //Reset Hand
    #####:  934:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  935:  state->hand[currentPlayer][i] = temphand[i];
    #####:  936:  temphand[i] = -1;
        -:  937:      }
        -:  938:      //Reset Hand
        -:  939:            
    #####:  940:      return 0;
unconditional  0 never executed
        -:  941:      
        -:  942:    
        -:  943:/*********************************************************************/
        -:  944:
        -:  945:
        -:  946:
        -:  947:    case gardens:
    #####:  948:      return -1;
unconditional  0 never executed
        -:  949:      
        -:  950:   
        -:  951:/*********************************************************************/
        -:  952:
        -:  953:
        -:  954:
        -:  955:    case mine:
    #####:  956:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  957:
    #####:  958:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  959:  {
    #####:  960:    return -1;
unconditional  0 never executed
        -:  961:  }
        -:  962:    
    #####:  963:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  964:  {
    #####:  965:    return -1;
unconditional  0 never executed
        -:  966:  }
        -:  967:
    #####:  968:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  969:  {
    #####:  970:    return -1;
unconditional  0 never executed
        -:  971:  }
        -:  972:
    #####:  973:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  974:
        -:  975:      //discard card from hand
    #####:  976:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  977:
        -:  978:      //discard trashed card
    #####:  979:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -:  980:  {
    #####:  981:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  982:      {
    #####:  983:        discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####:  984:        break;
unconditional  0 never executed
        -:  985:      }
        -:  986:  }
        -:  987:      
    #####:  988:      return 0;
unconditional  0 never executed
        -:  989:      
        -:  990:    /*********************************************************************/
        -:  991:
        -:  992:
        -:  993:
        -:  994:
        -:  995:    case remodel:
    #####:  996:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  997:
    #####:  998:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  999:  {
    #####: 1000:    return -1;
unconditional  0 never executed
        -: 1001:  }
        -: 1002:
    #####: 1003:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1004:
        -: 1005:      //discard card from hand
    #####: 1006:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1007:
        -: 1008:      //discard trashed card
    #####: 1009:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1010:  {
    #####: 1011:    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1012:      {
    #####: 1013:        discardCard(i, currentPlayer, state, 0);      
call    0 never executed
    #####: 1014:        break;
unconditional  0 never executed
        -: 1015:      }
        -: 1016:  }
        -: 1017:
        -: 1018:
    #####: 1019:      return 0;
unconditional  0 never executed
        -: 1020:    
        -: 1021:    
        -: 1022:
        -: 1023:
        -: 1024:
        -: 1025:
        -: 1026:
        -: 1027:/*********************************************************************/
        -: 1028:
        -: 1029:   
        -: 1030:    
        -: 1031:
        -: 1032:
        -: 1033:      case smithy:
        1: 1034:        smithyFunction(currentPlayer,handPos,state);
call    0 returned 100%
        1: 1035:        return 0 ; 
unconditional  0 taken 100%
        -: 1036:
        -: 1037:
        -: 1038:/*********************************************************************/
        -: 1039:
        -: 1040:
        -: 1041:
        -: 1042:
        -: 1043:    case village:
        -: 1044:      //+1 Card
    #####: 1045:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1046:      
        -: 1047:      //+2 Actions
    #####: 1048:      state->numActions = state->numActions + 2;
        -: 1049:      
        -: 1050:      //discard played card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1052:      return 0;
unconditional  0 never executed
        -: 1053:    
        -: 1054:
        -: 1055:
        -: 1056:/*********************************************************************/
        -: 1057:
        -: 1058:
        -: 1059:
        -: 1060:
        -: 1061:
        -: 1062:    case baron:
    #####: 1063:      state->numBuys++;//Increase buys by 1!
    #####: 1064:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####: 1065:  int p = 0;//Iterator for hand!
    #####: 1066:  int card_not_discarded = 1;//Flag for discard set!
    #####: 1067:  while(card_not_discarded){
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
unconditional  3 never executed
    #####: 1068:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1069:      state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1070:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1071:      state->discardCount[currentPlayer]++;
    #####: 1072:      for (;p < state->handCount[currentPlayer]; p++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1073:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1074:      }
    #####: 1075:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1076:      state->handCount[currentPlayer]--;
    #####: 1077:      card_not_discarded = 0;//Exit the loop
unconditional  0 never executed
        -: 1078:    }
    #####: 1079:    else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1080:      if(DEBUG) {
        -: 1081:        printf("No estate cards in your hand, invalid choice\n");
        -: 1082:        printf("Must gain an estate if there are any\n");
        -: 1083:      }
    #####: 1084:      if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1085:        gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1086:        state->supplyCount[estate]--;//Decrement estates
    #####: 1087:        if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1088:    isGameOver(state);
call    0 never executed
unconditional  1 never executed
        -: 1089:        }
        -: 1090:      }
    #####: 1091:      card_not_discarded = 0;//Exit the loop
unconditional  0 never executed
        -: 1092:    }
        -: 1093:          
        -: 1094:    else{
    #####: 1095:      p++;//Next card
unconditional  0 never executed
        -: 1096:    }
        -: 1097:  }
        -: 1098:      }
        -: 1099:          
        -: 1100:      else{
    #####: 1101:  if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1102:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1103:    state->supplyCount[estate]--;//Decrement Estates
    #####: 1104:    if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1105:      isGameOver(state);
call    0 never executed
unconditional  1 never executed
        -: 1106:    }
        -: 1107:  }
        -: 1108:      }
        -: 1109:      
        -: 1110:      
    #####: 1111:      return 0;
unconditional  0 never executed
        -: 1112:    
        -: 1113:    
        -: 1114:
        -: 1115:/*********************************************************************/
        -: 1116:
        -: 1117:
        -: 1118:
        -: 1119:
        -: 1120:    case great_hall:
        -: 1121:      //+1 Card
        1: 1122:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1123:      
        -: 1124:      //+1 Actions
        1: 1125:      state->numActions++;
        -: 1126:      
        -: 1127:      //discard card from hand
        1: 1128:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1129:      return 0;
unconditional  0 taken 100%
        -: 1130:    
        -: 1131:    
        -: 1132:
        -: 1133:
        -: 1134:/*********************************************************************/
        -: 1135:
        -: 1136:
        -: 1137:
        -: 1138:
        -: 1139:    case minion:
        -: 1140:      //+1 action
    #####: 1141:      state->numActions++;
        -: 1142:      
        -: 1143:      //discard card from hand
    #####: 1144:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1145:      
    #####: 1146:      if (choice1)    //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1147:  {
    #####: 1148:    state->coins = state->coins + 2;
unconditional  0 never executed
        -: 1149:  }
        -: 1150:      
    #####: 1151:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1152:  {
        -: 1153:    //discard hand
    #####: 1154:    while(numHandCards(state) > 0)
unconditional  0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1155:      {
    #####: 1156:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
unconditional  1 never executed
        -: 1157:      }
        -: 1158:        
        -: 1159:    //draw 4
    #####: 1160:    for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1161:      {
    #####: 1162:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1163:      }
        -: 1164:        
        -: 1165:    //other players discard hand and redraw if hand size > 4
    #####: 1166:    for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1167:      {
    #####: 1168:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1169:    {
    #####: 1170:      if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1171:        {
        -: 1172:          //discard hand
    #####: 1173:          while( state->handCount[i] > 0 )
unconditional  0 never executed
branch  1 never executed
branch  2 never executed
        -: 1174:      {
    #####: 1175:        discardCard(handPos, i, state, 0);
call    0 never executed
unconditional  1 never executed
        -: 1176:      }
        -: 1177:              
        -: 1178:          //draw 4
    #####: 1179:          for (j = 0; j < 4; j++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1180:      {
    #####: 1181:        drawCard(i, state);
call    0 never executed
        -: 1182:      }
        -: 1183:        }
        -: 1184:    }
        -: 1185:      }
        -: 1186:        
        -: 1187:  }
    #####: 1188:      return 0;
unconditional  0 never executed
        -: 1189:    
        -: 1190:   
        -: 1191:
        -: 1192:
        -: 1193:
        -: 1194:
        -: 1195:/*********************************************************************/
        -: 1196:
        -: 1197:
        -: 1198:
        -: 1199:
        -: 1200:    case steward:
    #####: 1201:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1202:  {
        -: 1203:    //+2 cards
    #####: 1204:    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1205:    drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1206:  }
    #####: 1207:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1208:  {
        -: 1209:    //+2 coins
    #####: 1210:    state->coins = state->coins + 2;
unconditional  0 never executed
        -: 1211:  }
        -: 1212:      else
        -: 1213:  {
        -: 1214:    //trash 2 cards in hand
    #####: 1215:    discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1216:    discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
unconditional  1 never executed
        -: 1217:  }
        -: 1218:      
        -: 1219:      //discard card from hand
    #####: 1220:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1221:      return 0;
unconditional  0 never executed
        -: 1222:    
        -: 1223:    
        -: 1224:
        -: 1225:
        -: 1226:
        -: 1227:/**********************************************************************/
        -: 1228:
        -: 1229:
        -: 1230:
        -: 1231:
        -: 1232:
        -: 1233:
        -: 1234:
        -: 1235:
        -: 1236:    case tribute:
    #####: 1237:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1238:  if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1239:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1240:    state->deckCount[nextPlayer]--;
unconditional  0 never executed
        -: 1241:  }
    #####: 1242:  else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1243:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1244:    state->discardCount[nextPlayer]--;
unconditional  0 never executed
        -: 1245:  }
        -: 1246:  else{
        -: 1247:    //No Card to Reveal
        -: 1248:    if (DEBUG){
        -: 1249:      printf("No cards to reveal\n");
        -: 1250:    }
        -: 1251:  }
        -: 1252:      }
        -: 1253:      
        -: 1254:      else{
    #####: 1255:  if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1256:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1257:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1258:      state->deckCount[nextPlayer]++;
    #####: 1259:      state->discard[nextPlayer][i] = -1;
    #####: 1260:      state->discardCount[nextPlayer]--;
        -: 1261:    }
        -: 1262:          
    #####: 1263:    shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
unconditional  1 never executed
        -: 1264:  } 
    #####: 1265:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1266:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1267:  state->deckCount[nextPlayer]--;
    #####: 1268:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1269:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1270:  state->deckCount[nextPlayer]--;
unconditional  0 never executed
        -: 1271:      }    
        -: 1272:           
    #####: 1273:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1274:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1275:  state->playedCardCount++;
    #####: 1276:  tributeRevealedCards[1] = -1;
unconditional  0 never executed
        -: 1277:      }
        -: 1278:
    #####: 1279:      for (i = 0; i <= 2; i ++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1280:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1281:    state->coins += 2;
unconditional  0 never executed
        -: 1282:  }
        -: 1283:        
    #####: 1284:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1285:    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1286:    drawCard(currentPlayer, state);
call    0 never executed
unconditional  1 never executed
        -: 1287:  }
        -: 1288:  else{//Action Card
    #####: 1289:    state->numActions = state->numActions + 2;
unconditional  0 never executed
        -: 1290:  }
        -: 1291:      }
        -: 1292:      
    #####: 1293:      return 0;
unconditional  0 never executed
        -: 1294:    
        -: 1295:   
        -: 1296:
        -: 1297:/*********************************************************************/
        -: 1298:
        -: 1299:
        -: 1300:
        -: 1301:
        -: 1302:
        -: 1303:    case ambassador:
    #####: 1304:      j = 0;    //used to check if player has enough cards to discard
        -: 1305:
    #####: 1306:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1307:  {
    #####: 1308:    return -1;        
unconditional  0 never executed
        -: 1309:  }
        -: 1310:
    #####: 1311:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1312:  {
    #####: 1313:    return -1;
unconditional  0 never executed
        -: 1314:  }
        -: 1315:
    #####: 1316:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1317:  {
    #####: 1318:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1319:      {
    #####: 1320:        j++;
unconditional  0 never executed
        -: 1321:      }
        -: 1322:  }
    #####: 1323:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1324:  {
    #####: 1325:    return -1;        
unconditional  0 never executed
        -: 1326:  }
        -: 1327:
        -: 1328:      if (DEBUG) 
        -: 1329:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1330:
        -: 1331:      //increase supply count for choosen card by amount being discarded
    #####: 1332:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1333:      
        -: 1334:      //each other player gains a copy of revealed card
    #####: 1335:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1336:  {
    #####: 1337:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1338:      {
    #####: 1339:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
unconditional  1 never executed
        -: 1340:      }
        -: 1341:  }
        -: 1342:
        -: 1343:      //discard played card from hand
    #####: 1344:      discardCard(handPos, currentPlayer, state, 0);      
call    0 never executed
        -: 1345:
        -: 1346:      //trash copies of cards returned to supply
    #####: 1347:      for (j = 0; j < choice2; j++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1348:  {
    #####: 1349:    for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1350:      {
    #####: 1351:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1352:    {
    #####: 1353:      discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1354:      break;
unconditional  0 never executed
        -: 1355:    }
        -: 1356:      }
        -: 1357:  }     
        -: 1358:
    #####: 1359:      return 0;
unconditional  0 never executed
        -: 1360:    
        -: 1361:   
        -: 1362:
        -: 1363:/********************************/
        -: 1364:
        -: 1365:
        -: 1366:
        -: 1367:
        -: 1368:
        -: 1369:
        -: 1370:    case cutpurse:
        -: 1371:
    #####: 1372:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1373:      for (i = 0; i < state->numPlayers; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1374:  {
    #####: 1375:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1376:      {
    #####: 1377:        for (j = 0; j < state->handCount[i]; j++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1378:    {
    #####: 1379:      if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1380:        {
    #####: 1381:          discardCard(j, i, state, 0);
call    0 never executed
    #####: 1382:          break;
unconditional  0 never executed
        -: 1383:        }
    #####: 1384:      if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1385:        {
    #####: 1386:          for (k = 0; k < state->handCount[i]; k++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1387:      {
        -: 1388:        if (DEBUG)
        -: 1389:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1390:      } 
    #####: 1391:          break;
unconditional  0 never executed
        -: 1392:        }   
        -: 1393:    }
        -: 1394:          
        -: 1395:      }
        -: 1396:        
        -: 1397:  }       
        -: 1398:
        -: 1399:      //discard played card from hand
    #####: 1400:      discardCard(handPos, currentPlayer, state, 0);      
call    0 never executed
        -: 1401:
    #####: 1402:      return 0;
unconditional  0 never executed
        -: 1403:
        -: 1404:    
        -: 1405:    
        -: 1406:
        -: 1407:
        -: 1408:/********************************/
        -: 1409:
        -: 1410:
        -: 1411:
        -: 1412:
        -: 1413:
        -: 1414:
        -: 1415:
        -: 1416:
        -: 1417:
        -: 1418:    case embargo: 
        -: 1419:      //+2 Coins
    #####: 1420:      state->coins = state->coins + 2;
        -: 1421:      
        -: 1422:      //see if selected pile is in play
    #####: 1423:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1424:  {
    #####: 1425:    return -1;
unconditional  0 never executed
        -: 1426:  }
        -: 1427:      
        -: 1428:
    #####: 1429:       state->embargoTokens[choice1]++;
        -: 1430:      
        -: 1431:      //trash card
    #####: 1432:      discardCard(handPos, currentPlayer, state, 1);    
call    0 never executed
    #####: 1433:      return 0;
unconditional  0 never executed
        -: 1434:    
        -: 1435:
        -: 1436:/********************************/
        -: 1437:
        -: 1438:
        -: 1439:   
        -: 1440:
        -: 1441:      
        -: 1442:
        -: 1443:
        -: 1444:
        -: 1445:      // call outpost function 
        -: 1446:      case outpost:
    #####: 1447:      outpostFunction(currentPlayer,handPos,state);
call    0 never executed
    #####: 1448:      return 0;
unconditional  0 never executed
        -: 1449:
        -: 1450:
        -: 1451:
        -: 1452:/********************************/
        -: 1453:
        -: 1454:
        -: 1455:
        -: 1456:
        -: 1457:      // call salvegerFunction
        -: 1458:      case salvager:
    #####: 1459:      salvagerFunction(currentPlayer,handPos,choice1,state);
call    0 never executed
    #####: 1460:      return 0 ;
unconditional  0 never executed
        -: 1461:
        -: 1462:
        -: 1463:
        -: 1464:
        -: 1465:
        -: 1466:  /********************************/
        -: 1467:
        -: 1468:
        -: 1469:
        -: 1470:
        -: 1471:    
        -: 1472:
        -: 1473:
        -: 1474:
        -: 1475:
        -: 1476:
        -: 1477:    case sea_hag:
    #####: 1478:      for (i = 0; i < state->numPlayers; i++){
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1479:  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1480:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1481:    state->discardCount[i]++;
    #####: 1482:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
unconditional  0 never executed
        -: 1483:  }
        -: 1484:      }
    #####: 1485:      return 0;
unconditional  0 never executed
        -: 1486:    
        -: 1487:   
        -: 1488:
        -: 1489:
        -: 1490:/********************************/
        -: 1491:
        -: 1492:
        -: 1493:
        -: 1494:
        -: 1495:    case treasure_map:
        -: 1496:      //search hand for another treasure_map
    #####: 1497:      index = -1;
    #####: 1498:      for (i = 0; i < state->handCount[currentPlayer]; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1499:  {
    #####: 1500:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1501:      {
    #####: 1502:        index = i;
    #####: 1503:        break;
unconditional  0 never executed
        -: 1504:      }
        -: 1505:  }
    #####: 1506:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1507:  {
        -: 1508:    //trash both treasure cards
    #####: 1509:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1510:    discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1511:
        -: 1512:    //gain 4 Gold cards
    #####: 1513:    for (i = 0; i < 4; i++)
unconditional  0 never executed
unconditional  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1514:      {
    #####: 1515:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1516:      }
        -: 1517:        
        -: 1518:    //return success
    #####: 1519:    return 1;
unconditional  0 never executed
        -: 1520:  }
        -: 1521:      
        -: 1522:      //no second treasure_map found in hand
    #####: 1523:      return -1;
unconditional  0 never executed
        -: 1524:    }
        -: 1525:  
    #####: 1526:  return -1;
unconditional  0 never executed
unconditional  1 taken 100%
        -: 1527:}
        -: 1528:
        -: 1529:/********************************/
        -: 1530:
        -: 1531:
        -: 1532:
        -: 1533:
        -: 1534:
        -: 1535:
function discardCard called 5 returned 100% blocks executed 78%
        5: 1536:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1537:{
        -: 1538:  
        -: 1539:  //if card is not trashed, added to Played pile 
        5: 1540:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1541:    {
        -: 1542:      //add card to played pile
        5: 1543:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1544:      state->playedCardCount++;
unconditional  0 taken 100%
        -: 1545:    }
        -: 1546:  
        -: 1547:  //set played card to -1
        5: 1548:  state->hand[currentPlayer][handPos] = -1;
        -: 1549:  
        -: 1550:  //remove card from player's hand
        5: 1551:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1552:    {
        -: 1553:      //reduce number of cards in hand
    #####: 1554:      state->handCount[currentPlayer]--;
unconditional  0 never executed
        -: 1555:    }
        5: 1556:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1557:    {
        -: 1558:      //reduce number of cards in hand
    #####: 1559:      state->handCount[currentPlayer]--;
unconditional  0 never executed
        -: 1560:    }
        -: 1561:  else  
        -: 1562:    {
        -: 1563:      //replace discarded card with last card in hand
        5: 1564:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1565:      //set last card to -1
        5: 1566:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1567:      //reduce number of cards in hand
        5: 1568:      state->handCount[currentPlayer]--;
unconditional  0 taken 100%
        -: 1569:    }
        -: 1570:  
        5: 1571:  return 0;
unconditional  0 taken 100%
        -: 1572:}
        -: 1573:
        -: 1574:
        -: 1575:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1576:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1577:{
        -: 1578:  //Note: supplyPos is enum of choosen card
        -: 1579:  
        -: 1580:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1581:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1582:    {
    #####: 1583:      return -1;
unconditional  0 never executed
        -: 1584:    }
        -: 1585:  
        -: 1586:  //added card for [whoseTurn] current player:
        -: 1587:  // toFlag = 0 : add to discard
        -: 1588:  // toFlag = 1 : add to deck
        -: 1589:  // toFlag = 2 : add to hand
        -: 1590:
    #####: 1591:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1592:    {
    #####: 1593:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1594:      state->deckCount[player]++;
unconditional  0 never executed
        -: 1595:    }
    #####: 1596:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1597:    {
    #####: 1598:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1599:      state->handCount[player]++;
unconditional  0 never executed
        -: 1600:    }
        -: 1601:  else
        -: 1602:    {
    #####: 1603:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1604:      state->discardCount[player]++;
unconditional  0 never executed
        -: 1605:    }
        -: 1606:  
        -: 1607:  //decrease number in supply pile
    #####: 1608:  state->supplyCount[supplyPos]--;
        -: 1609:   
    #####: 1610:  return 0;
unconditional  0 never executed
        -: 1611:}
        -: 1612:
        -: 1613:
        -: 1614:
function updateCoins called 928 returned 100% blocks executed 100%
      928: 1615:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1616:{
        -: 1617:  int i;
        -: 1618:  
        -: 1619:  //reset coin count
      928: 1620:  state->coins = 0;
        -: 1621:
        -: 1622:  //add coins for each Treasure card in player's hand
     4028: 1623:  for (i = 0; i < state->handCount[player]; i++)
unconditional  0 taken 100%
unconditional  1 taken 100%
branch  2 taken 77%
branch  3 taken 23% (fallthrough)
        -: 1624:    {
     3100: 1625:      if (state->hand[player][i] == copper)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 1626:  {
     1351: 1627:    state->coins += 1;
unconditional  0 taken 100%
        -: 1628:  }
     1749: 1629:      else if (state->hand[player][i] == silver)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
        -: 1630:  {
      660: 1631:    state->coins += 2;
unconditional  0 taken 100%
        -: 1632:  }
     1089: 1633:      else if (state->hand[player][i] == gold)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -: 1634:  {
      594: 1635:    state->coins += 3;
unconditional  0 taken 100%
        -: 1636:  } 
        -: 1637:    } 
        -: 1638:
        -: 1639:  //add bonus
      928: 1640:  state->coins += bonus;
        -: 1641:
      928: 1642:  return 0;
unconditional  0 taken 100%
        -: 1643:}
        -: 1644:
        -: 1645:
        -: 1646://end of dominion.c
        -: 1647:
